[.env.example]

  lang: unknown

[.eslintrc.js]

  lang: javascript

[.github/workflows/azure-static-web-apps-salmon-pond-00993830f.yml]

  lang: javascript
  error: Babel parsing failed: Missing semicolon. (1:11)

[.gitignore]

  lang: unknown

[.husky/pre-commit]

  lang: unknown

[.prettierrc]

  lang: unknown

[README.md]

  lang: python
  imp: {react from 'eslint-plugin-react':[react from 'eslint-plugin-react']}

[change.txt]

  lang: javascript
  error: Babel parsing failed: Missing semicolon. (1:7)

[eslint.config.js]

  lang: javascript
  imp:
    @eslint/js:[js]
      globals:[globals]
      eslint-plugin-react-hooks:[reactHooks]
      eslint-plugin-react-refresh:[reactRefresh]
      typescript-eslint:[tseslint]
      __exports__:[default]

[index.html]

  lang: html

[jest.config.js]

  lang: javascript

[jest.setup.ts]

  lang: typescript
  imp: {}

[package.json]

  lang: json

[public/vite.svg]

  lang: typescript

[src/App.css]

  lang: typescript
  error: Babel parsing failed: Private names are only allowed in property accesses (`obj.#root`) or in `in` expressions (`#root in obj`). (1:0)

[src/App.tsx]

  lang: typescript
  imp:
    react:[useState]
      ./shared/components/atoms/Button:[Button]
      ./shared/components/atoms/Input:[Input]
      ./shared/components/atoms/Modal:[Modal]
      ./shared/components/atoms/Loader:[Loader]
      ./shared/components/atoms/Table:[Table]
      ./shared/components/atoms/Alert:[Alert]
      ./shared/components/atoms/EmptyState:[EmptyState]
      __exports__:[default]
  fn:
    App()
  states: [0] t:useState, var:app, mut:update

[src/app/ErrorBoundary.tsx]

  lang: typescript
  imp:
    react:[React, ErrorInfo]
      ../shared/components/atoms/Alert:[Alert]
      __exports__:[default]
  cls:
    ErrorBoundary
      mth: constructor(props), getDerivedStateFromError(error), componentDidCatch(error, errorInfo), render()

[src/app/layouts/AdminLayout.tsx]

  lang: typescript
  imp:
    react:[React, ReactNode]
      @chakra-ui/react:[Flex]
      ../../shared/components/layout/Header:[Header]
      ../../shared/components/layout/Sidebar:[Sidebar]
      ../../shared/components/layout/Footer:[Footer]
      ../../shared/components/layout/MainContent:[MainContent]
      __exports__:[default]
  fn:
    AdminLayout({ ... })({ ... })

[src/app/layouts/CatalogManagerLayout.tsx]

  lang: typescript
  imp:
    react:[React]
      react-router-dom:[Outlet]
      @chakra-ui/react:[Box, Flex]
      ../providers/LayoutContext:[LayoutProvider]
      ../../shared/components/layout/Header:[Header]
      ../../shared/components/layout/Sidebar:[Sidebar]
      ../../shared/components/layout/Footer:[Footer]
      ../../features/inventory/hooks/useInventoryCsv:[InventoryCsvProvider]
      __exports__:[default]
  fn:
    CatalogManagerLayout()
      doc: CatalogManagerLayout wraps catalog manager portal pages.
  states: [0] t:useState, var:catalogmanagerlayout, mut:update

[src/app/layouts/PartnerLayout.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Flex]
      ../providers/LayoutContext:[LayoutProvider]
      ../../shared/components/layout/Header:[Header]
      ../../shared/components/layout/Sidebar:[Sidebar]
      ../../shared/components/layout/Footer:[Footer]
      __exports__:[default]
  fn:
    PartnerLayout({ ... })({ ... })
      doc: PartnerLayout wraps partner portal pages.

[src/app/layouts/SupportStaffLayout.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Flex]
      ../providers/LayoutContext:[LayoutProvider]
      ../../shared/components/layout/Header:[Header]
      ../../shared/components/layout/Sidebar:[Sidebar]
      ../../shared/components/layout/Footer:[Footer]
      __exports__:[default]
  fn:
    SupportStaffLayout({ ... })({ ... })
      doc: SupportStaffLayout wraps support staff portal pages.

[src/app/providers/AuthContext.tsx]

  lang: typescript
  imp:
    react:[React, createContext, useState, useContext, ReactNode]
      __exports__:[default]
  fn:
    AuthProvider({ ... })({ ... })
      doc: "AuthProvider wraps parts of the app that require authentication state.\nIt manages authentication state including access and refresh tokens,\nand exposes actions to login, logout, and refresh tokens."
    login(accessToken, userRole, refreshToken)(accessToken, userRole, refreshToken)
    logout()
    useAuthContext()
      doc: "useAuthContext is a custom hook to access authentication state and actions.\n@throws Error if used outside AuthProvider."
  states:
    [0] t:useState, var:authprovider, mut:update
        [1] t:useState, var:context, mut:read
        [2] t:useState, var:login, mut:update
        [3] t:useState, var:context, mut:read
        [4] t:useState, var:logout, mut:update
        [5] t:useState, var:context, mut:read
        [6] t:useState, var:authcontext, mut:update
        [7] t:useState, var:context, mut:read

[src/app/providers/LayoutContext.tsx]

  lang: typescript
  imp:
    react:[React, createContext, useReducer, useContext, ReactNode]
      __exports__:[default]
  fn:
    layoutReducer(state, action)(state, action)
    LayoutProvider({ ... })({ ... })
      doc: LayoutProvider wraps parts of the app that need layout state (e.g. sidebar open/close).
    toggleSidebar()
    useLayout()
      doc: "Custom hook to use the layout context.\n@throws Error if used outside LayoutProvider."
  states:
    [0] t:useReducer, var:layoutreducer, mut:update
        [1] t:useState, var:context, mut:read
        [2] t:useReducer, var:layoutprovider, mut:update
        [3] t:useState, var:context, mut:read
        [4] t:useReducer, var:togglesidebar, mut:update
        [5] t:useState, var:context, mut:read
        [6] t:useState, var:layout, mut:update
        [7] t:useReducer, var:layout, mut:update
        [8] t:useState, var:context, mut:read

[src/app/providers/QueryClientProvider.tsx]

  lang: typescript
  imp:
    react:[React]
      @tanstack/react-query:[QueryClient, QueryClientProvider]
      @tanstack/react-query-devtools:[ReactQueryDevtools]
      __exports__:[default]
  fn:
    QueryClientProvider({ ... })({ ... })

[src/app/routes/AppRoutes.tsx]

  lang: typescript
  imp:
    react:[React, Suspense, lazy]
      react-router-dom:[BrowserRouter, Routes, Route, Navigate, Outlet]
      ./ProtectedRoute:[ProtectedRoute]
      @chakra-ui/react:[Box]
      ../../shared/components/atoms/Loader:[Loader]
      ../../features/auth/components/CatalogLoginForm:[CatalogLoginForm]
      ../../features/auth/components/CatalogForgotPasswordForm:[CatalogForgotPasswordForm]
      ../../features/inventory/components/InventoryUploadScreen:[InventoryUploadScreen]
      ../../features/inventory/components/InventoryConfirmationScreen:[InventoryConfirmationScreen]
      ../../features/catalog/hooks/JsonBulkUploadContext:[JsonBulkUploadProvider]
      __exports__:[default]
  fn:
    DashboardPage()
    Unauthorized()
    AppRoutes()

[src/app/routes/ProtectedRoute.tsx]

  lang: typescript
  imp:
    react:[React]
      react-router-dom:[Navigate, Outlet]
      ../../shared/hooks/usePermissions:[usePermissions]
      __exports__:[default]
  fn:
    isAuthenticated()
    ProtectedRoute({ ... })({ ... })

[src/assets/react.svg]

  lang: typescript

[src/features/auth/components/CatalogForgotPasswordForm.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      react-hook-form:[useForm, SubmitHandler]
      @chakra-ui/react:[Box, Flex, Link]
      react-router-dom:[Link]
      axios:[axios]
      ../../../shared/components/atoms/Alert:[Alert]
      ../../../shared/components/atoms/Input:[Input]
      ../../../shared/components/atoms/Button:[Button]
      ../../../shared/api/axiosClient:[axiosClient]
      __exports__:[default]
  fn:
    CatalogForgotPasswordForm()
      doc: "CatalogForgotPasswordForm allows Catalog Managers\nto request password reset by providing their username."
    escapeHtml(str)(str)
    async onSubmit(data)(data)
  states:
    [0] t:useState, var:catalogforgotpasswordform, mut:update
        [1] t:useState, var:escapehtml, mut:update
        [2] t:useState, var:onsubmit, mut:update
  events:
    [0] t:dom_event, event:submit, hdl:onSubmit, framework:DOM
        [1] t:dom_event, event:callback, hdl:onSubmit, framework:Custom
        [2] t:onSubmit, event:submit, hdl:onSubmit, framework:Generic

[src/features/auth/components/CatalogLoginForm.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      react-hook-form:[useForm, SubmitHandler]
      @chakra-ui/react:[Box, Flex, Link]
      react-router-dom:[Link, useNavigate]
      axios:[axios]
      ../../../shared/components/atoms/Alert:[Alert]
      ../../../shared/components/atoms/Input:[Input]
      ../../../shared/components/atoms/Button:[Button]
      ../../../shared/api/axiosClient:[axiosClient]
      ../../../shared/hooks/useAuth:[useAuth]
      __exports__:[default]
  fn:
    CatalogLoginForm()
      doc: "CatalogLoginForm is a login form for Catalog Managers.\nIt uses react-hook-form for validation and axiosClient to call\nPOST /api/auth/login/catalog-manager/."
    escapeHtml(str)(str)
    async onSubmit(data)(data)
  states:
    [0] t:useState, var:catalogloginform, mut:update
        [1] t:useState, var:escapehtml, mut:update
        [2] t:useState, var:onsubmit, mut:update
  events:
    [0] t:dom_event, event:submit, hdl:onSubmit, framework:DOM
        [1] t:dom_event, event:callback, hdl:onSubmit, framework:Custom
        [2] t:onSubmit, event:submit, hdl:onSubmit, framework:Generic

[src/features/auth/components/Dashboard.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Text]
      ../../../shared/hooks/useAuth:[useAuth]
      __exports__:[default]
  fn:
    Dashboard()
      doc: Dashboard is a placeholder component displaying basic authentication info.

[src/features/auth/components/LoginForm.tsx]

  lang: typescript
  imp:
    react:[React]
      react-hook-form:[useForm]
      @chakra-ui/react:[Box, Flex]
      ../../../shared/components/atoms/Input:[Input]
      ../../../shared/components/atoms/Button:[Button]
      __exports__:[default]
  fn:
    LoginForm()
      doc: "LoginForm demonstrates the usage of React Hook Form with Chakra UI atoms.\nIt replaces the previous Tailwind-based implementation."
    onSubmit(data)(data)
  events:
    [0] t:dom_event, event:submit, hdl:onSubmit, framework:DOM
        [1] t:dom_event, event:callback, hdl:onSubmit, framework:Custom
        [2] t:onSubmit, event:submit, hdl:onSubmit, framework:Generic

[src/features/auth/components/OrderList.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Text]
      ./../../../features/orders/hooks//useOrders:[useOrders]
      ../../../shared/components/atoms/Loader:[Loader]
      ../../../shared/components/atoms/EmptyState:[EmptyState]
      ../../../shared/components/atoms/ErrorMessage:[ErrorMessage]
      __exports__:[default]
  fn:
    OrderList()

[src/features/catalog/BulkUploadScreen.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      @chakra-ui/react:[Box, Text, Progress]
      @tanstack/react-query:[useMutation]
      ../../shared/api/axiosClient:[axiosClient]
      axios:[AxiosProgressEvent, AxiosError]
      ../../shared/components/atoms/Alert:[Alert]
      ../../shared/components/atoms/Button:[Button]
      ../../shared/components/atoms/Input:[Input]
      __exports__:[default]
  fn:
    BulkUploadScreen()
    handleFileChange(e)(e)
    handleUpload()
  states:
    [0] t:useState, var:bulkuploadscreen, mut:update
        [1] t:useState, var:handlefilechange, mut:update
        [2] t:useState, var:handlefilechange, mut:update
        [3] t:useState, var:handleupload, mut:update
        [4] t:useState, var:handleupload, mut:update
  events:
    [0] t:dom_event, event:load, hdl:BulkUploadScreen, framework:DOM
        [1] t:dom_event, event:change, hdl:handleFileChange, framework:DOM
        [2] t:onChange, event:change, hdl:handleFileChange, framework:Generic
        [3] t:dom_event, event:load, hdl:handleUpload, framework:DOM
        [4] t:dom_event, event:load, hdl:handleUpload, framework:Generic

[src/features/catalog/Dashboard.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/icons:[ViewIcon, RepeatIcon, RepeatIcon]
      @chakra-ui/react:[Box, Text, SimpleGrid, Flex, Icon, useColorModeValue, Button, Tooltip]
      @tanstack/react-query:[useQuery]
      ../../shared/api/axiosClient:[axiosClient]
      ../../shared/components/atoms/Loader:[Loader]
      ../../shared/components/atoms/Alert:[Alert]
      __exports__:[default]
  fn:
    StatCard({ ... })({ ... })
    Dashboard()
    handleRefresh()
  states: [0] t:useState, var:handlerefresh, mut:update
  events: [0] t:dom_event, event:unknown, hdl:handleRefresh, framework:Generic

[src/features/catalog/EditableInfoItem.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      @chakra-ui/react:[Flex, Text, IconButton, Input, useToast, FormLabel]
      @chakra-ui/icons:[EditIcon, CheckIcon, CloseIcon]
      ../../shared/api/axiosClient:[axiosClient]
      __exports__:[default]
  fn:
    EditableInfoItem({ ... })({ ... })
    async handleSave()
    handleCancel()
  states:
    [0] t:useState, var:editableinfoitem, mut:update
        [1] t:useState, var:handlesave, mut:update
        [2] t:useState, var:handlesave, mut:update
        [3] t:useState, var:handlecancel, mut:update
        [4] t:useState, var:handlecancel, mut:update
  events:
    [0] t:dom_event, event:unknown, hdl:handleSave, framework:Generic
        [1] t:dom_event, event:unknown, hdl:handleCancel, framework:Generic

[src/features/catalog/InventoryManagement.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      @chakra-ui/react:[Box, Flex, Input, Radio, RadioGroup, Stack, Text]
      @tanstack/react-query:[useQuery, useMutation, useQueryClient]
      ../../shared/api/axiosClient:[axiosClient]
      ../../shared/components/atoms/Loader:[Loader]
      ../../shared/components/atoms/Alert:[Alert]
      ../../shared/components/atoms/Button:[Button]
      __exports__:[default]
  fn:
    InventoryManagement()
    handleUpdateChange(sku, field, value)(sku, field, value)
    handleSubmit()
  states:
    [0] t:useState, var:inventorymanagement, mut:update
        [1] t:useState, var:inventorymanagement, mut:update
        [2] t:useState, var:handleupdatechange, mut:update
        [3] t:useState, var:handleupdatechange, mut:update
        [4] t:useState, var:handlesubmit, mut:update
        [5] t:useState, var:handlesubmit, mut:update
  events:
    [0] t:dom_event, event:change, hdl:handleUpdateChange, framework:DOM
        [1] t:onChange, event:change, hdl:handleUpdateChange, framework:Generic
        [2] t:dom_event, event:submit, hdl:handleSubmit, framework:DOM
        [3] t:onSubmit, event:submit, hdl:handleSubmit, framework:Generic

[src/features/catalog/JSONBulkUploadConfirmationScreen.tsx]

  lang: typescript
  imp:
    react:[React, useState, useEffect, useCallback]
      @chakra-ui/react:[Box, Container, Text, Progress, Flex, Table, Thead, Tbody, Tr, Th, Td]
      ../../shared/components/atoms/Button:[Button]
      ../../shared/components/atoms/Modal:[Modal]
      ./hooks/JsonBulkUploadContext:[useJsonBulkUpload]
      ../../shared/api/axiosClient:[axiosClient]
      ./utils/jsonBulkUploadValidation:[applyDefaultFields]
      ./types/jsonProduct:[JSONProduct]
      react-router-dom:[useNavigate]
      __exports__:[default]
  fn:
    JSONBulkUploadConfirmationScreen()
    handleBeforeUnload(e)(e)
    async handleSubmitUpload()
    handleReupload()
  states:
    [0] t:useState, var:jsonbulkuploadconfirmationscreen, mut:update
        [1] t:useState, var:handlebeforeunload, mut:update
        [2] t:useState, var:handlebeforeunload, mut:update
        [3] t:useState, var:handlesubmitupload, mut:update
        [4] t:useState, var:handlesubmitupload, mut:update
        [5] t:useState, var:handlereupload, mut:update
        [6] t:useState, var:handlereupload, mut:update
  events:
    [0] t:dom_event, event:load, hdl:JSONBulkUploadConfirmationScreen, framework:DOM
        [1] t:dom_event, event:callback, hdl:JSONBulkUploadConfirmationScreen, framework:Custom
        [2] t:dom_event, event:load, hdl:JSONBulkUploadConfirmationScreen, framework:Generic
        [3] t:dom_event, event:load, hdl:handleBeforeUnload, framework:DOM
        [4] t:dom_event, event:load, hdl:handleBeforeUnload, framework:Generic
        [5] t:dom_event, event:submit, hdl:handleSubmitUpload, framework:DOM
        [6] t:dom_event, event:load, hdl:handleSubmitUpload, framework:DOM
        [7] t:onSubmit, event:submit, hdl:handleSubmitUpload, framework:Generic
        [8] t:dom_event, event:load, hdl:handleReupload, framework:DOM
        [9] t:dom_event, event:load, hdl:handleReupload, framework:Generic

[src/features/catalog/JSONBulkUploadScreen.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      @chakra-ui/react:[Box, Text]
      ../../shared/components/atoms/Button:[Button]
      ../../shared/components/atoms/Input:[Input]
      ../../shared/components/atoms/Alert:[Alert]
      react-router-dom:[useNavigate]
      ./utils/jsonBulkUploadValidation:[validateBulkUploadJSON]
      ./hooks/JsonBulkUploadContext:[useJsonBulkUpload]
      __exports__:[default]
  fn:
    JSONBulkUploadScreen()
    handleFileChange(e)(e)
    handleValidate()
  states:
    [0] t:useState, var:jsonbulkuploadscreen, mut:update
        [1] t:useState, var:handlefilechange, mut:update
        [2] t:useState, var:handlefilechange, mut:update
        [3] t:useState, var:handlevalidate, mut:update
        [4] t:useState, var:handlevalidate, mut:update
  events:
    [0] t:dom_event, event:load, hdl:JSONBulkUploadScreen, framework:DOM
        [1] t:dom_event, event:change, hdl:handleFileChange, framework:DOM
        [2] t:onChange, event:change, hdl:handleFileChange, framework:Generic
        [3] t:dom_event, event:unknown, hdl:handleValidate, framework:Generic

[src/features/catalog/NewProductForm.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Button, FormControl, FormLabel, Input, Stack, Heading, useToast]
      react-hook-form:[useForm, SubmitHandler]
      @tanstack/react-query:[useMutation, useQueryClient]
      ../../shared/api/axiosClient:[axiosClient]
      ./productTypes:[IProduct]
      __exports__:[default]
  fn:
    NewProductForm()
    onSubmit(formData)(formData)
  events:
    [0] t:dom_event, event:submit, hdl:onSubmit, framework:DOM
        [1] t:dom_event, event:callback, hdl:onSubmit, framework:Custom
        [2] t:onSubmit, event:submit, hdl:onSubmit, framework:Generic

[src/features/catalog/ProductDetailView.tsx]

  lang: typescript
  imp:
    react:[React, FC]
      @chakra-ui/react:[Box, SimpleGrid, Heading, Text, Stack, Button, Spinner, Card, CardHeader, CardBody, Image, Grid, GridItem, Flex]
      react-router-dom:[useParams, useNavigate]
      @tanstack/react-query:[useQuery]
      ../../shared/api/axiosClient:[axiosClient]
      ./productTypes:[IProduct, getCustomAttribute]
      ./EditableInfoItem:[EditableInfoItem]
      __exports__:[default]
  fn:
    async fetchProductDetail(sku)(sku)
    formatNumber(value)(value)
    formatCurrency(value)(value)
    InfoItem({ ... })({ ... })
    SectionCard({ ... })({ ... })
    ProductDetailView()
  events:
    [0] t:dom_event, event:callback, hdl:SectionCard, framework:Custom
        [1] t:dom_event, event:unknown, hdl:SectionCard, framework:Generic

[src/features/catalog/ProductListing.tsx]

  lang: typescript
  imp:
    react:[React, useState, useMemo, useCallback]
      @chakra-ui/react:[Box, Flex, Input, Text, Table, Thead, Tbody, Tr, Th, Td, TableContainer, Container, ThemeProvider, extendTheme]
      @tanstack/react-query:[useQuery]
      react-router-dom:[useNavigate]
      ../../shared/api/axiosClient:[axiosClient]
      ../../shared/components/atoms/Loader:[Loader]
      ../../shared/components/atoms/Alert:[Alert]
      ../../shared/components/atoms/Button:[Button]
      __exports__:[default]
  fn:
    ProductListing()
  states: [0] t:useState, var:productlisting, mut:update

[src/features/catalog/Profile.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Button, Flex, FormControl, FormLabel, Input, Text, useToast]
      react-hook-form:[useForm]
      @tanstack/react-query:[useQuery, useMutation, useQueryClient]
      ../../shared/api/axiosClient:[axiosClient]
      ../../shared/components/atoms/Loader:[Loader]
      ../../shared/components/atoms/Alert:[Alert]
      __exports__:[default]
  fn:
    Profile()
    onSubmit(data)(data)
  events:
    [0] t:dom_event, event:submit, hdl:onSubmit, framework:DOM
        [1] t:dom_event, event:callback, hdl:onSubmit, framework:Custom
        [2] t:onSubmit, event:submit, hdl:onSubmit, framework:Generic

[src/features/catalog/Reports.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      @chakra-ui/react:[Box, Input, Button, Flex, Text]
      @tanstack/react-query:[useQuery]
      ../../shared/api/axiosClient:[axiosClient]
      ../../shared/components/atoms/Loader:[Loader]
      ../../shared/components/atoms/Alert:[Alert]
      __exports__:[default]
  fn:
    Reports()
    handleFetchReport()
  states:
    [0] t:useState, var:reports, mut:update
        [1] t:useState, var:handlefetchreport, mut:update
        [2] t:useState, var:handlefetchreport, mut:update
  events: [0] t:dom_event, event:unknown, hdl:handleFetchReport, framework:Generic

[src/features/catalog/hooks/JsonBulkUploadContext.tsx]

  lang: typescript
  imp:
    react:[React, createContext, useContext, useState, ReactNode]
      ../types/jsonProduct:[JSONProduct]
      __exports__:[default]
  fn:
    JsonBulkUploadProvider({ ... })({ ... })
    clearProducts()
    useJsonBulkUpload()
  states:
    [0] t:useState, var:jsonbulkuploadprovider, mut:update
        [1] t:useState, var:context, mut:read
        [2] t:useState, var:clearproducts, mut:update
        [3] t:useState, var:context, mut:read
        [4] t:useState, var:jsonbulkupload, mut:update
        [5] t:useState, var:context, mut:read
  events:
    [0] t:dom_event, event:load, hdl:JsonBulkUploadProvider, framework:DOM
        [1] t:dom_event, event:callback, hdl:JsonBulkUploadProvider, framework:Custom
        [2] t:dom_event, event:load, hdl:JsonBulkUploadProvider, framework:Generic
        [3] t:dom_event, event:load, hdl:useJsonBulkUpload, framework:DOM
        [4] t:dom_event, event:callback, hdl:useJsonBulkUpload, framework:Custom
        [5] t:dom_event, event:load, hdl:useJsonBulkUpload, framework:Generic

[src/features/catalog/productTypes.ts]

  lang: typescript
  imp: {__exports__:[default]}
  fn:
    getCustomAttribute(product, code)(product, code)

[src/features/catalog/types/jsonProduct.ts]

  lang: typescript
  imp: {__exports__:[default]}

[src/features/catalog/utils/jsonBulkUploadValidation.ts]

  lang: typescript
  imp:
    ../types/jsonProduct:[JSONProduct]
      __exports__:[default]
  fn:
    validateBulkUploadJSON(fileContent)(fileContent)
      doc: "Validates and parses the uploaded JSON file for bulk product upload.\nIt enforces that the file is a JSON array of products (max 100)\nwhere each product must contain every mandatory field.\n@param fileContent - string content of the file.\n@returns ValidationResult with a valid flag, error message if any, and an array of products."
    applyDefaultFields(product)(product)
      doc: "Applies default values to a product if missing optional fields.\nThese defaults are required by Magento and ensure consistency.\n@param product - JSONProduct object to apply default values.\n@returns The product with default fields populated."
  events: [0] t:dom_event, event:load, hdl:validateBulkUploadJSON, framework:DOM

[src/features/demo/QueryDemo.tsx]

  lang: typescript
  imp:
    react:[React, useMemo]
      @tanstack/react-query:[useQuery]
      ../../shared/components/atoms/Loader:[Loader]
      __exports__:[default]
  fn:
    async fetchData()
    QueryDemo()

[src/features/inventory/components/InventoryConfirmationScreen.tsx]

  lang: typescript
  imp:
    react:[React, useState, useCallback]
      @chakra-ui/react:[Box, Text, Progress, TableContainer, Table, Thead, Tbody, Tr, Th, Td, Container]
      ../../../shared/components/atoms/Button:[Button]
      ../../../shared/components/atoms/Alert:[Alert]
      ../hooks/useInventoryCsv:[useInventoryCsv]
      ../inventoryService:[updateInventoryRow]
      react-router-dom:[useNavigate]
      __exports__:[default]
  fn:
    InventoryConfirmationScreen()
    async handleStartProcessing()
    handleCancel()
    handleReset()
  states:
    [0] t:useState, var:inventoryconfirmationscreen, mut:update
        [1] t:useState, var:handlestartprocessing, mut:update
        [2] t:useState, var:handlestartprocessing, mut:update
        [3] t:useState, var:handlecancel, mut:update
        [4] t:useState, var:handlecancel, mut:update
        [5] t:useState, var:handlereset, mut:update
        [6] t:useState, var:handlereset, mut:update
  events:
    [0] t:dom_event, event:callback, hdl:InventoryConfirmationScreen, framework:Custom
        [1] t:dom_event, event:unknown, hdl:InventoryConfirmationScreen, framework:Generic
        [2] t:dom_event, event:unknown, hdl:handleStartProcessing, framework:Generic
        [3] t:dom_event, event:unknown, hdl:handleCancel, framework:Generic
        [4] t:dom_event, event:unknown, hdl:handleReset, framework:Generic

[src/features/inventory/components/InventoryUploadScreen.tsx]

  lang: typescript
  imp:
    react:[React, useState]
      @chakra-ui/react:[Box, Text, Stack]
      ../../../shared/components/atoms/Button:[Button]
      ../../../shared/components/atoms/Input:[Input]
      ../../../shared/components/atoms/Alert:[Alert]
      ../hooks/useInventoryCsv:[parseInventoryCsv, useInventoryCsv]
      react-router-dom:[useNavigate]
      __exports__:[default]
  fn:
    InventoryUploadScreen()
    handleFileChange(e)(e)
    async handleUploadAndValidate()
  states:
    [0] t:useState, var:inventoryuploadscreen, mut:update
        [1] t:useState, var:handlefilechange, mut:update
        [2] t:useState, var:handlefilechange, mut:update
        [3] t:useState, var:handleuploadandvalidate, mut:update
        [4] t:useState, var:handleuploadandvalidate, mut:update
  events:
    [0] t:dom_event, event:load, hdl:InventoryUploadScreen, framework:DOM
        [1] t:dom_event, event:change, hdl:handleFileChange, framework:DOM
        [2] t:onChange, event:change, hdl:handleFileChange, framework:Generic
        [3] t:dom_event, event:load, hdl:handleUploadAndValidate, framework:DOM
        [4] t:dom_event, event:load, hdl:handleUploadAndValidate, framework:Generic

[src/features/inventory/hooks/useInventoryCsv.tsx]

  lang: typescript
  imp:
    papaparse:[Papa]
      react:[React, createContext, useState, useContext, ReactNode, useCallback]
      __exports__:[default]
  fn:
    async parseInventoryCsv(file)(file)
      doc: "parseInventoryCsv(file: File):\n- Reads and parses the CSV.\n- Ensures required columns (sku, source_code, quantity) are present.\n- Any row with invalid numeric 'quantity' triggers parse failure.\n- If valid, returns rows with status=\"Pending\"."
    InventoryCsvProvider({ ... })({ ... })
    useInventoryCsv()
  states:
    [0] t:useState, var:parseinventorycsv, mut:update
        [1] t:useState, var:context, mut:read
        [2] t:useState, var:inventorycsvprovider, mut:update
        [3] t:useState, var:context, mut:read
        [4] t:useState, var:inventorycsv, mut:update
        [5] t:useState, var:context, mut:read

[src/features/inventory/inventoryService.ts]

  lang: typescript
  imp:
    ../../shared/api/axiosClient:[axiosClient]
      __exports__:[default]
  fn:
    async updateInventoryRow(payload)(payload)
      doc: "updateInventoryRow(payload: InventoryUpdatePayload):\nPerforms the POST to /api/cm/inventory\nReturns a promise that resolves if successful, rejects if error"

[src/features/orders/hooks/useOrders.ts]

  lang: typescript
  imp:
    @tanstack/react-query:[useQuery]
      __exports__:[default]
  fn:
    useOrders()

[src/jest-dom.d.ts]

  lang: typescript
  imp: {}

[src/main.tsx]

  lang: typescript
  imp:
    react:[React]
      react-dom/client:[ReactDOM]
      @chakra-ui/react:[ChakraProvider]
      ./theme:[theme]
      ./app/routes/AppRoutes:[AppRoutes]
      ./app/ErrorBoundary:[ErrorBoundary]
      ./app/providers/LayoutContext:[LayoutProvider]
      ./app/providers/QueryClientProvider:[QueryClientProvider]
      ./app/providers/AuthContext:[AuthProvider]

[src/shared/api/axiosClient.ts]

  lang: typescript
  imp:
    axios:[axios, AxiosError, InternalAxiosRequestConfig, AxiosResponse]
      __exports__:[default]

[src/shared/api/csrf.ts]

  lang: typescript
  imp: {__exports__:[default]}
  fn:
    getCsrfToken()
      doc: "csrf.ts provides a basic setup for CSRF protection.\nThis file can be extended to include specific configurations if required by the backend."

[src/shared/components/atoms/Alert.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Alert, AlertIcon, AlertTitle, AlertDescription, Box]
      __exports__:[default]
  fn:
    Alert({ ... })({ ... })

[src/shared/components/atoms/Button.tsx]

  lang: typescript
  imp:
    @chakra-ui/react:[Button, ButtonProps]
      __exports__:[default]
  fn:
    Button({ ... })({ ... })

[src/shared/components/atoms/EmptyState.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Center, Text]
      __exports__:[default]
  fn:
    EmptyState({ ... })({ ... })
  states: [0] t:useState, var:emptystate, mut:update

[src/shared/components/atoms/ErrorMessage.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Alert, AlertIcon, AlertDescription]
      __exports__:[default]
  fn:
    ErrorMessage({ ... })({ ... })

[src/shared/components/atoms/Input.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[FormControl, FormLabel, Input, FormErrorMessage, InputProps]
      __exports__:[default]

[src/shared/components/atoms/Loader.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Spinner, Box]
      __exports__:[default]

[src/shared/components/atoms/Modal.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Modal, ModalOverlay, ModalContent, ModalCloseButton, ModalBody, ModalProps]
      __exports__:[default]
  fn:
    Modal({ ... })({ ... })
      doc: "Modal component that displays content in an overlay using Chakra UI.\n@example\n<Modal isOpen={isModalOpen} onClose={() => setModalOpen(false)}>\n<div>Modal Content</div>\n</Modal>"

[src/shared/components/atoms/OptimizedImage.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Image, ImageProps]
      __exports__:[default]
  fn:
    OptimizedImage({ ... })({ ... })
      doc: "OptimizedImage\nA wrapper over Chakra UI's Image that sets loading=\"lazy\" to defer off-screen image loading.\nThis component can be used throughout the application to ensure optimized image delivery.\n@param {ImageProps} props - Props passed to the Chakra Image component."

[src/shared/components/atoms/Table.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Table, Thead, Tbody, Tr, Th, Td, TableContainer]
      __exports__:[default]

[src/shared/components/layout/Footer.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, Text]
      __exports__:[default]
  fn:
    Footer()
      doc: Footer component, displayed at the bottom of the application.

[src/shared/components/layout/Header.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Flex, IconButton, Box, Heading]
      @chakra-ui/icons:[HamburgerIcon]
      ../../../app/providers/LayoutContext:[useLayout]
      __exports__:[default]
  fn:
    Header()
      doc: "Header component for the application.\nProvides a hamburger button to toggle the sidebar and displays the portal title."

[src/shared/components/layout/MainContent.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box]
      __exports__:[default]
  fn:
    MainContent({ ... })({ ... })
      doc: MainContent component encapsulates the primary content area.

[src/shared/components/layout/Sidebar.tsx]

  lang: typescript
  imp:
    react:[React]
      @chakra-ui/react:[Box, VStack, Link, Heading]
      react-router-dom:[Link]
      ../../../app/providers/LayoutContext:[useLayout]
      __exports__:[default]
  fn:
    Sidebar()

[src/shared/hooks/useAuth.ts]

  lang: typescript
  imp:
    ../../app/providers/AuthContext:[useAuthContext]
      __exports__:[default]
  fn:
    useAuth()

[src/shared/hooks/usePermissions.ts]

  lang: typescript
  imp:
    ./useAuth:[useAuth]
      __exports__:[default]
  fn:
    usePermissions(allowedRoles)(allowedRoles)
      doc: "usePermissions hook checks if the current user’s role is included in allowedRoles.\n@param allowedRoles - An array of permitted roles.\n@returns Boolean indicating if the user has permission."

[src/shared/hooks/useSession.ts]

  lang: typescript
  imp:
    react:[useEffect]
      ./useAuth:[useAuth]
      __exports__:[default]
  fn:
    useSession()
      doc: "useSession hook monitors the current session token.\nIt can be extended for token expiry or idle timeout management."
  states: [0] t:useState, var:session, mut:update

[src/shared/types/loadingState.ts]

  lang: typescript
  imp: {__exports__:[default]}

[src/shared/utils/sanitize.ts]

  lang: typescript
  imp: {__exports__:[default]}
  fn:
    sanitizeInput(input)(input)

[src/theme.ts]

  lang: typescript
  imp:
    @chakra-ui/react:[extendTheme, ThemeConfig]
      __exports__:[default]

[src/types/env.d.ts]

  lang: typescript

[src/vite-env.d.ts]

  lang: typescript

[staticwebapp.config.json]

  lang: json

[tsconfig.app.json]

  lang: json

[tsconfig.json]

  lang: json

[tsconfig.node.json]

  lang: json

[vite.config.ts]

  lang: typescript
  imp:
    vite:[defineConfig]
      @vitejs/plugin-react:[react]
      __exports__:[default]

[yarn.lock]

  lang: unknown


[PROJECT_SUMMARY]

  total_files: 84
  languages:
    unknown:5
      javascript:5
      python:1
      json:5
      html:1
      typescript:67
  fw:
    React:1
      React Native:0.2716049382716049


[FILE_DEPENDENCIES]

  README.md: react from 'eslint-plugin-react'

  eslint.config.js: @eslint/js, __exports__, eslint-plugin-react-hooks, eslint-plugin-react-refresh, globals, typescript-eslint

  src/app/ErrorBoundary.tsx: __exports__, react, src/shared/components/atoms/Alert.tsx

  src/App.tsx: __exports__, react, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/EmptyState.tsx, src/shared/components/atoms/Input.tsx, src/shared/components/atoms/Loader.tsx, src/shared/components/atoms/Modal.tsx, src/shared/components/atoms/Table.tsx

  src/app/layouts/AdminLayout.tsx: @chakra-ui/react, __exports__, react, src/shared/components/layout/Footer.tsx, src/shared/components/layout/Header.tsx, src/shared/components/layout/MainContent.tsx, src/shared/components/layout/Sidebar.tsx

  src/app/providers/AuthContext.tsx: __exports__, react

  src/app/providers/LayoutContext.tsx: __exports__, react

  src/app/layouts/CatalogManagerLayout.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/app/providers/LayoutContext.tsx, src/features/inventory/hooks/useInventoryCsv.tsx, src/shared/components/layout/Footer.tsx, src/shared/components/layout/Header.tsx, src/shared/components/layout/Sidebar.tsx

  src/app/providers/QueryClientProvider.tsx: @tanstack/react-query, @tanstack/react-query-devtools, __exports__, react

  src/app/layouts/PartnerLayout.tsx: @chakra-ui/react, __exports__, react, src/app/providers/LayoutContext.tsx, src/shared/components/layout/Footer.tsx, src/shared/components/layout/Header.tsx, src/shared/components/layout/Sidebar.tsx

  src/app/layouts/SupportStaffLayout.tsx: @chakra-ui/react, __exports__, react, src/app/providers/LayoutContext.tsx, src/shared/components/layout/Footer.tsx, src/shared/components/layout/Header.tsx, src/shared/components/layout/Sidebar.tsx

  src/app/routes/ProtectedRoute.tsx: __exports__, react, react-router-dom, src/shared/hooks/usePermissions.ts

  src/app/routes/AppRoutes.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/app/routes/ProtectedRoute.tsx, src/features/auth/components/CatalogForgotPasswordForm.tsx, src/features/auth/components/CatalogLoginForm.tsx, src/features/catalog/hooks/JsonBulkUploadContext.tsx, src/features/inventory/components/InventoryConfirmationScreen.tsx, src/features/inventory/components/InventoryUploadScreen.tsx, src/shared/components/atoms/Loader.tsx

  src/features/auth/components/Dashboard.tsx: @chakra-ui/react, __exports__, react, src/shared/hooks/useAuth.ts

  src/features/auth/components/CatalogForgotPasswordForm.tsx: @chakra-ui/react, __exports__, axios, react, react-hook-form, react-router-dom, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Input.tsx

  src/features/auth/components/LoginForm.tsx: @chakra-ui/react, __exports__, react, react-hook-form, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Input.tsx

  src/features/auth/components/OrderList.tsx: @chakra-ui/react, __exports__, react, src/features/orders/hooks/useOrders.ts, src/shared/components/atoms/EmptyState.tsx, src/shared/components/atoms/ErrorMessage.tsx, src/shared/components/atoms/Loader.tsx

  src/features/auth/components/CatalogLoginForm.tsx: @chakra-ui/react, __exports__, axios, react, react-hook-form, react-router-dom, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Input.tsx, src/shared/hooks/useAuth.ts

  src/features/catalog/BulkUploadScreen.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, axios, react, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Input.tsx

  src/features/catalog/Dashboard.tsx: @chakra-ui/icons, @chakra-ui/react, @tanstack/react-query, __exports__, react, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Loader.tsx

  src/features/catalog/InventoryManagement.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, react, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Loader.tsx

  src/features/catalog/EditableInfoItem.tsx: @chakra-ui/icons, @chakra-ui/react, __exports__, react, src/shared/api/axiosClient.ts

  src/features/catalog/JSONBulkUploadScreen.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/features/catalog/hooks/JsonBulkUploadContext.tsx, src/features/catalog/utils/jsonBulkUploadValidation.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Input.tsx

  src/features/catalog/NewProductForm.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, react, react-hook-form, src/features/catalog/productTypes.ts, src/shared/api/axiosClient.ts

  src/features/catalog/JSONBulkUploadConfirmationScreen.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/features/catalog/hooks/JsonBulkUploadContext.tsx, src/features/catalog/types/jsonProduct.ts, src/features/catalog/utils/jsonBulkUploadValidation.ts, src/shared/api/axiosClient.ts, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Modal.tsx

  src/features/catalog/ProductDetailView.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, react, react-router-dom, src/features/catalog/EditableInfoItem.tsx, src/features/catalog/productTypes.ts, src/shared/api/axiosClient.ts

  src/features/catalog/ProductListing.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, react, react-router-dom, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Loader.tsx

  src/features/catalog/Profile.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, react, react-hook-form, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Loader.tsx

  src/features/catalog/Reports.tsx: @chakra-ui/react, @tanstack/react-query, __exports__, react, src/shared/api/axiosClient.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Loader.tsx

  src/features/catalog/hooks/JsonBulkUploadContext.tsx: __exports__, react, src/features/catalog/types/jsonProduct.ts

  src/features/demo/QueryDemo.tsx: @tanstack/react-query, __exports__, react, src/shared/components/atoms/Loader.tsx

  src/features/catalog/types/jsonProduct.ts: __exports__

  src/features/catalog/utils/jsonBulkUploadValidation.ts: __exports__, src/features/catalog/types/jsonProduct.ts

  src/features/catalog/productTypes.ts: __exports__

  src/features/inventory/components/InventoryUploadScreen.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/features/inventory/hooks/useInventoryCsv.tsx, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx, src/shared/components/atoms/Input.tsx

  src/features/inventory/components/InventoryConfirmationScreen.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/features/inventory/hooks/useInventoryCsv.tsx, src/features/inventory/inventoryService.ts, src/shared/components/atoms/Alert.tsx, src/shared/components/atoms/Button.tsx

  src/features/inventory/inventoryService.ts: __exports__, src/shared/api/axiosClient.ts

  src/features/inventory/hooks/useInventoryCsv.tsx: __exports__, papaparse, react

  src/features/orders/hooks/useOrders.ts: @tanstack/react-query, __exports__

  src/shared/api/csrf.ts: __exports__

  src/shared/components/atoms/Alert.tsx: @chakra-ui/react, __exports__, react

  src/main.tsx: @chakra-ui/react, react, react-dom/client, src/app/ErrorBoundary.tsx, src/app/providers/AuthContext.tsx, src/app/providers/LayoutContext.tsx, src/app/providers/QueryClientProvider.tsx, src/app/routes/AppRoutes.tsx, src/theme.ts

  src/shared/components/atoms/EmptyState.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/atoms/ErrorMessage.tsx: @chakra-ui/react, __exports__, react

  src/shared/api/axiosClient.ts: __exports__, axios

  src/shared/components/atoms/Button.tsx: @chakra-ui/react, __exports__

  src/shared/components/atoms/Loader.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/atoms/Input.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/atoms/OptimizedImage.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/atoms/Modal.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/layout/Footer.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/layout/MainContent.tsx: @chakra-ui/react, __exports__, react

  src/shared/components/atoms/Table.tsx: @chakra-ui/react, __exports__, react

  src/shared/hooks/useAuth.ts: __exports__, src/app/providers/AuthContext.tsx

  src/shared/hooks/usePermissions.ts: __exports__, src/shared/hooks/useAuth.ts

  src/shared/components/layout/Header.tsx: @chakra-ui/icons, @chakra-ui/react, __exports__, react, src/app/providers/LayoutContext.tsx

  src/shared/components/layout/Sidebar.tsx: @chakra-ui/react, __exports__, react, react-router-dom, src/app/providers/LayoutContext.tsx

  src/shared/hooks/useSession.ts: __exports__, react, src/shared/hooks/useAuth.ts

  src/shared/types/loadingState.ts: __exports__

  src/shared/utils/sanitize.ts: __exports__

  src/theme.ts: @chakra-ui/react, __exports__

  vite.config.ts: @vitejs/plugin-react, __exports__, vite