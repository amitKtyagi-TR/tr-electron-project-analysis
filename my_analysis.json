{
  "folder_structure": {
    "root": [
      {
        "path": ".env.example",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 29,
        "characters": 738,
        "non_empty_lines": 27,
        "avg_line_length": 25.448275862068964
      },
      {
        "path": ".flake8",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 32,
        "characters": 466,
        "non_empty_lines": 31,
        "avg_line_length": 14.5625
      },
      {
        "language": "typescript",
        "imports": {},
        "functions": {},
        "classes": {},
        "path": ".gitignore",
        "error": "Babel parsing failed: Unexpected token (1:0)"
      },
      {
        "path": "cert.pem",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 35,
        "characters": 2110,
        "non_empty_lines": 34,
        "avg_line_length": 60.285714285714285
      },
      {
        "path": "key.pem",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 53,
        "characters": 3272,
        "non_empty_lines": 52,
        "avg_line_length": 61.735849056603776
      },
      {
        "path": "manage.py",
        "language": "python",
        "imports": {
          "os": [
            "os"
          ],
          "sys": [
            "sys"
          ],
          "django.core.management": [
            "execute_from_command_line"
          ]
        },
        "functions": {
          "main()": {
            "docstring": "Run administrative tasks.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 5
          }
        },
        "classes": {},
        "lines": 23,
        "characters": 663,
        "non_empty_lines": 18,
        "avg_line_length": 28.82608695652174
      },
      {
        "path": "pyproject.toml",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 25,
        "characters": 461,
        "non_empty_lines": 24,
        "avg_line_length": 18.44
      },
      {
        "path": "pytest.ini",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 5,
        "characters": 138,
        "non_empty_lines": 4,
        "avg_line_length": 27.6
      },
      {
        "language": "typescript",
        "imports": {},
        "functions": {},
        "classes": {},
        "path": "README.md",
        "error": "Babel parsing failed: Unexpected token (2:0)"
      },
      {
        "path": "requirements.txt",
        "language": "unknown",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 80,
        "characters": 3008,
        "non_empty_lines": 80,
        "avg_line_length": 37.6
      },
      {
        "path": "warehouses.json",
        "language": "json",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 237,
        "characters": 5410,
        "non_empty_lines": 234,
        "avg_line_length": 22.827004219409282
      }
    ],
    ".github/workflows": [
      {
        "path": ".github/workflows/main_bazoo-backend.yml",
        "language": "yaml",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 101,
        "characters": 2820,
        "non_empty_lines": 84,
        "avg_line_length": 27.92079207920792
      }
    ],
    "accounts": [
      {
        "path": "accounts/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "accounts/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ],
          ".models": [
            "HousingSociety",
            "OTPVerification",
            "UserMapping"
          ]
        },
        "functions": {},
        "classes": {
          "HousingSocietyAdmin": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "admin.ModelAdmin"
            ],
            "line_number": 7,
            "decorators": [
              {
                "name": "admin.register"
              }
            ],
            "is_component": true
          }
        },
        "lines": 14,
        "characters": 402,
        "non_empty_lines": 8,
        "avg_line_length": 28.714285714285715
      },
      {
        "path": "accounts/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "AccountsConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 148,
        "non_empty_lines": 4,
        "avg_line_length": 21.142857142857142
      },
      {
        "path": "accounts/models.py",
        "language": "python",
        "imports": {
          "django.contrib.auth.models": [
            "User"
          ],
          "django.core.exceptions": [
            "ValidationError",
            "ValidationError"
          ],
          "django.db": [
            "models"
          ]
        },
        "functions": {
          "clean(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 50
          },
          "save(self, *args, **kwargs)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "*args",
              "**kwargs"
            ],
            "line_number": 56
          },
          "__str__(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 60
          }
        },
        "classes": {
          "UserMapping": {
            "docstring": "",
            "methods": {
              "clean(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 51
              },
              "save(self, *args, **kwargs)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 57
              },
              "__str__(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 61
              }
            },
            "base_classes": [
              "models.Model"
            ],
            "line_number": 6,
            "is_component": true
          },
          "Meta": {
            "docstring": "",
            "methods": {},
            "base_classes": [],
            "line_number": 48
          },
          "HousingSociety": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 76,
            "is_component": true
          },
          "OTPVerification": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 85,
            "is_component": true
          },
          "BPHousingSocietyMapping": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 103,
            "is_component": true
          },
          "Address": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 127,
            "is_component": true
          },
          "BPWarehouseMapping": {
            "docstring": "Maps Business Partners (BPs) to Warehouses (Magento Sources).",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 144,
            "is_component": true
          },
          "Warehouse": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 168,
            "is_component": true
          }
        },
        "lines": 175,
        "characters": 5460,
        "non_empty_lines": 142,
        "avg_line_length": 31.2,
        "state_changes": [
          {
            "type": "django_create",
            "line": 6,
            "variable": "usermapping",
            "mutation_type": "create"
          },
          {
            "type": "django_save",
            "line": 57,
            "variable": "usermapping",
            "mutation_type": "update"
          },
          {
            "type": "django_create",
            "line": 76,
            "variable": "housingsociety",
            "mutation_type": "create"
          },
          {
            "type": "django_create",
            "line": 85,
            "variable": "otpverification",
            "mutation_type": "create"
          },
          {
            "type": "django_create",
            "line": 103,
            "variable": "bphousingsocietymapping",
            "mutation_type": "create"
          },
          {
            "type": "django_create",
            "line": 127,
            "variable": "address",
            "mutation_type": "create"
          },
          {
            "type": "django_create",
            "line": 144,
            "variable": "bpwarehousemapping",
            "mutation_type": "create"
          },
          {
            "type": "django_create",
            "line": 168,
            "variable": "warehouse",
            "mutation_type": "create"
          }
        ]
      },
      {
        "path": "accounts/permissions.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "rest_framework": [
            "permissions"
          ]
        },
        "functions": {
          "has_permission(self, request, view)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "view"
            ],
            "line_number": 8
          }
        },
        "classes": {
          "IsBuyer": {
            "docstring": "",
            "methods": {
              "has_permission(self, request, view)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "view"
                ],
                "line_number": 9
              }
            },
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 8
          },
          "IsCatalogManager": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 13
          },
          "IsAdminUser": {
            "docstring": "Allows access only to admin users.",
            "methods": {},
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 18
          },
          "IsBusinessPartner": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 27
          },
          "IsAdministrator": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 32
          },
          "IsSupportStaff": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 42
          },
          "IsAuthenticatedAndHasRole": {
            "docstring": "Ensures the user is authenticated and has one of the allowed roles.",
            "methods": {},
            "base_classes": [
              "permissions.BasePermission"
            ],
            "line_number": 47
          }
        },
        "lines": 58,
        "characters": 1737,
        "non_empty_lines": 37,
        "avg_line_length": 29.948275862068964
      },
      {
        "path": "accounts/serializers.py",
        "language": "python",
        "imports": {
          "django.core.validators": [
            "RegexValidator"
          ],
          "rest_framework": [
            "serializers"
          ],
          ".models": [
            "Address",
            "BPHousingSocietyMapping",
            "HousingSociety",
            "OTPVerification",
            "UserMapping"
          ]
        },
        "functions": {
          "validate(self, attrs)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "attrs"
            ],
            "line_number": 41
          },
          "validate_housing_society(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 83
          },
          "validate_email(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 113
          },
          "validate_first_name(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 116
          },
          "validate_last_name(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 119
          },
          "validate_contact_number(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 122
          },
          "validate_business_partner_id(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 134
          },
          "validate_street(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 157
          },
          "validate_city(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 160
          },
          "validate_state(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 163
          },
          "validate_country(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 166
          },
          "validate_postal_code(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 169
          },
          "validate(self, data)": {
            "docstring": "Validate that customer and BP exist with correct roles\nReturn customer and BP instances for the view to use",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "data"
            ],
            "line_number": 186
          },
          "validate_uid(self, value)": {
            "docstring": "Check if a UserMapping with this UID and role 'Buyer' already exists.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 228
          },
          "validate_latlong(self, value)": {
            "docstring": "Validate latlong has the correct structure.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 234
          },
          "get_status(self, obj)": {
            "docstring": "Return 'None' string if status is None (null in db), else return the status value",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "obj"
            ],
            "line_number": 278
          },
          "validate_role(self, value)": {
            "docstring": "Maps external role names to internal role names used in the system.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 400
          }
        },
        "classes": {
          "LoginSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 13,
            "is_component": true
          },
          "AuthTokenSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 18,
            "is_component": true
          },
          "HousingSocietySerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 22,
            "is_component": true
          },
          "Meta": {
            "docstring": "",
            "methods": {},
            "base_classes": [],
            "line_number": 23
          },
          "PasswordResetRequestSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 28,
            "is_component": true
          },
          "PasswordResetConfirmSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 32,
            "is_component": true
          },
          "SendOTPSerializer": {
            "docstring": "",
            "methods": {
              "validate(self, attrs)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "attrs"
                ],
                "line_number": 42
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 38,
            "is_component": true
          },
          "VerifyOTPSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 61,
            "is_component": true
          },
          "BuyerRegistrationSerializer": {
            "docstring": "",
            "methods": {
              "validate_housing_society(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 84
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 67,
            "is_component": true
          },
          "UserProfileSerializer": {
            "docstring": "",
            "methods": {
              "validate_email(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 114
              },
              "validate_first_name(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 117
              },
              "validate_last_name(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 120
              },
              "validate_contact_number(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 123
              }
            },
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 92,
            "is_component": true
          },
          "AssignBusinessPartnerSerializer": {
            "docstring": "",
            "methods": {
              "validate_business_partner_id(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 135
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 131,
            "is_component": true
          },
          "AddressSerializer": {
            "docstring": "",
            "methods": {
              "validate_street(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 158
              },
              "validate_city(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 161
              },
              "validate_state(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 164
              },
              "validate_country(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 167
              },
              "validate_postal_code(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 170
              }
            },
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 143,
            "is_component": true
          },
          "MapCustomerToBPSerializer": {
            "docstring": "Serializer for mapping a customer to a Business Partner.\nValidates that both customer_uid and bp_uid exist and have correct roles.",
            "methods": {
              "validate(self, data)": {
                "docstring": "Validate that customer and BP exist with correct roles\nReturn customer and BP instances for the view to use",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "data"
                ],
                "line_number": 187
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 178,
            "is_component": true
          },
          "CustomerCreateSerializer": {
            "docstring": "",
            "methods": {
              "validate_uid(self, value)": {
                "docstring": "Check if a UserMapping with this UID and role 'Buyer' already exists.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 229
              },
              "validate_latlong(self, value)": {
                "docstring": "Validate latlong has the correct structure.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 235
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 217,
            "is_component": true
          },
          "SyncCustomersResultSerializer": {
            "docstring": "Serializer for the response from the customer sync operation.",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 262,
            "is_component": true
          },
          "BuyerStatusSerializer": {
            "docstring": "Serializer for returning buyer status information.",
            "methods": {
              "get_status(self, obj)": {
                "docstring": "Return 'None' string if status is None (null in db), else return the status value",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "obj"
                ],
                "line_number": 279
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 271,
            "is_component": true
          },
          "UpdateBpStatusSerializer": {
            "docstring": "Serializer for updating a buyer's BP mapping status.",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 284,
            "is_component": true
          },
          "BpResponseSerializer": {
            "docstring": "Serializer for BP's response to a buyer assignment.",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 327,
            "is_component": true
          },
          "AdminUserCreateSerializer": {
            "docstring": "Serializer for creating administrative users (admin, CM, Support)",
            "methods": {
              "validate_role(self, value)": {
                "docstring": "Maps external role names to internal role names used in the system.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 401
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 387,
            "is_component": true
          }
        },
        "lines": 409,
        "characters": 13511,
        "non_empty_lines": 325,
        "avg_line_length": 33.034229828850854,
        "state_changes": [
          {
            "type": "useState",
            "line": 163,
            "variable": "validate_state",
            "mutation_type": "update"
          }
        ]
      },
      {
        "path": "accounts/urls.py",
        "language": "python",
        "imports": {
          "django.urls": [
            "path"
          ],
          "rest_framework.routers": [
            "DefaultRouter"
          ],
          ".views": [
            "AddressViewSet",
            "AdministratorLoginView",
            "AssignBusinessPartnerView",
            "BusinessPartnerLoginView",
            "BuyerLoginView",
            "BuyerRegistrationView",
            "CatalogManagerLoginView",
            "HousingSocietyListView",
            "LogoutView",
            "PasswordResetConfirmView",
            "PasswordResetRequestView",
            "SendOTPView",
            "SupportStaffLoginView",
            "UserProfileView",
            "VerifyOTPView",
            "bp_buyer_response",
            "create_customer",
            "list_all_buyers_status",
            "list_unassigned_buyers",
            "map_customer_to_bp",
            "sync_new_customers",
            "update_buyer_bp_status"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 88,
        "characters": 2800,
        "non_empty_lines": 83,
        "avg_line_length": 31.818181818181817
      },
      {
        "path": "accounts/utils.py",
        "language": "python",
        "imports": {
          "hashlib": [
            "hashlib"
          ],
          "logging": [
            "logging"
          ],
          "math": [
            "math"
          ],
          "datetime": [
            "timedelta"
          ],
          "jwt": [
            "jwt"
          ],
          "requests": [
            "requests"
          ],
          "django.conf": [
            "settings"
          ],
          "django.core.cache": [
            "cache"
          ],
          "django.utils": [
            "timezone"
          ],
          "requests_oauthlib": [
            "OAuth1"
          ],
          "core.magento": [
            "magento_api_call"
          ],
          "integration.utils": [
            "get_cached_warehouses"
          ],
          ".models": [
            "Address",
            "BPHousingSocietyMapping",
            "BPWarehouseMapping",
            "HousingSociety",
            "OTPVerification",
            "UserMapping"
          ],
          "django.db.models": [
            "Q"
          ]
        },
        "functions": {
          "verify_user_role(token: str, expected_role: str)": {
            "docstring": "Verifies if the user has the expected role.\nArgs:\ntoken: JWT token from Magento\nexpected_role: The role that should be assigned to this user\nReturns:\ntuple of (is_valid: bool, error_message: str, uid: str)",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "token: str",
              "expected_role: str"
            ],
            "line_number": 29
          },
          "get_buyer_warehouses(buyer_uid: str)": {
            "docstring": "Retrieves the list of warehouse source codes assigned to the Buyer based on their Business Partner (BP).\nIf the Buyer has no assigned BP, returns all available warehouses.\nArgs:\nbuyer_uid (str): UID of the Buyer.\nReturns:\nList of warehouse source codes assigned to the Buyer or all warehouses if unassigned.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "buyer_uid: str"
            ],
            "line_number": 67
          },
          "forward_credentials_to_magento(email: str, password: str, user_type: str)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "email: str",
              "password: str",
              "user_type: str"
            ],
            "line_number": 113
          },
          "reset_password_in_magento(email: str)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "email: str"
            ],
            "line_number": 132
          },
          "confirm_reset_password_in_magento(email: str, token: str, new_password: str)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "email: str",
              "token: str",
              "new_password: str"
            ],
            "line_number": 143
          },
          "generate_otp()": {
            "docstring": "Generates a fixed OTP for development purposes.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 160
          },
          "send_email_otp(email: str, otp_code: str)": {
            "docstring": "Placeholder function to send OTP via email.\nCurrently logs the OTP for testing.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "email: str",
              "otp_code: str"
            ],
            "line_number": 167
          },
          "send_sms_otp(phone_number: str, otp_code: str)": {
            "docstring": "Placeholder function to send OTP via SMS.\nCurrently logs the OTP for testing.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "phone_number: str",
              "otp_code: str"
            ],
            "line_number": 176
          },
          "create_otp_entry(contact_type: str, contact_value: str, otp_code: str)": {
            "docstring": "Creates an OTPVerification entry in the database.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "contact_type: str",
              "contact_value: str",
              "otp_code: str"
            ],
            "line_number": 185
          },
          "verify_otp(contact_type: str, contact_value: str, otp_code: str)": {
            "docstring": "Verifies the provided OTP.\nChecks if the OTP is correct and not expired (valid for 5 minutes).",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "contact_type: str",
              "contact_value: str",
              "otp_code: str"
            ],
            "line_number": 197
          },
          "create_magento_customer(email: str, password: str, first_name: str, last_name: str, contact_number: str, housing_society_id: int)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "email: str",
              "password: str",
              "first_name: str",
              "last_name: str",
              "contact_number: str",
              "housing_society_id: int"
            ],
            "line_number": 221
          },
          "assign_bp_to_buyer(buyer_id: str, housing_society_id: int)": {
            "docstring": "Assigns a Business Partner to a Buyer based on Housing Society.\nIf multiple BPs serve the same Housing Society, flags the Buyer for manual assignment.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "buyer_id: str",
              "housing_society_id: int"
            ],
            "line_number": 318
          },
          "get_admin_token()": {
            "docstring": "Retrieves the Magento admin token required for authentication when updating customer data.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 362
          }
        },
        "classes": {},
        "lines": 469,
        "characters": 16335,
        "non_empty_lines": 398,
        "avg_line_length": 34.82942430703625
      },
      {
        "path": "accounts/views.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "jwt": [
            "jwt"
          ],
          "requests": [
            "requests"
          ],
          "django.core.exceptions": [
            "ValidationError"
          ],
          "django.core.validators": [
            "RegexValidator"
          ],
          "django.db": [
            "models",
            "transaction"
          ],
          "drf_spectacular.types": [
            "OpenApiTypes"
          ],
          "drf_spectacular.utils": [
            "OpenApiExample",
            "OpenApiParameter",
            "OpenApiResponse",
            "extend_schema",
            "inline_serializer"
          ],
          "rest_framework": [
            "generics",
            "serializers",
            "status",
            "viewsets"
          ],
          "rest_framework.decorators": [
            "api_view",
            "permission_classes"
          ],
          "rest_framework.permissions": [
            "AllowAny",
            "IsAdminUser"
          ],
          "rest_framework.response": [
            "Response"
          ],
          "rest_framework.views": [
            "APIView"
          ],
          "core.magento": [
            "magento_api_call",
            "magento_api_call_with_admin"
          ],
          "partners.models": [
            "BusinessPartnerProfile"
          ],
          ".models": [
            "Address",
            "HousingSociety",
            "OTPVerification",
            "UserMapping"
          ],
          ".serializers": [
            "AddressSerializer",
            "AdminUserCreateSerializer",
            "AssignBusinessPartnerSerializer",
            "AuthTokenSerializer",
            "BpResponseSerializer",
            "BuyerRegistrationSerializer",
            "BuyerStatusSerializer",
            "CustomerCreateSerializer",
            "HousingSocietySerializer",
            "LoginSerializer",
            "MapCustomerToBPSerializer",
            "PasswordResetConfirmSerializer",
            "PasswordResetRequestSerializer",
            "SendOTPSerializer",
            "SyncCustomersResultSerializer",
            "UpdateBpStatusSerializer",
            "UserProfileSerializer",
            "VerifyOTPSerializer"
          ],
          ".utils": [
            "assign_bp_to_buyer",
            "confirm_reset_password_in_magento",
            "create_magento_customer",
            "create_otp_entry",
            "forward_credentials_to_magento",
            "generate_otp",
            "reset_password_in_magento",
            "send_email_otp",
            "send_sms_otp",
            "verify_otp",
            "verify_user_role"
          ]
        },
        "functions": {
          "post(self, request)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_documented_api",
                "method": "POST",
                "line": 100
              },
              {
                "type": "django_http_method",
                "method": "POST",
                "line": 100
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 100,
            "decorators": [
              {
                "name": "extend_schema"
              }
            ]
          },
          "put(self, request)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "PUT",
                "line": 833
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 833
          },
          "get(self, request)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_documented_api",
                "method": "GET",
                "line": 974
              },
              {
                "type": "django_http_method",
                "method": "GET",
                "line": 974
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 974,
            "decorators": [
              {
                "name": "extend_schema"
              }
            ]
          },
          "get_queryset(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 1073
          },
          "perform_create(self, serializer)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "serializer"
            ],
            "line_number": 1078
          },
          "perform_update(self, serializer)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "serializer"
            ],
            "line_number": 1085
          },
          "perform_destroy(self, instance)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "instance"
            ],
            "line_number": 1090
          },
          "customer_lookup(request)": {
            "docstring": "Look up a customer's Business Partner by mobile number.\nThis endpoint converts the mobile number to an email address using the pattern:\n{mobileNumber}@bazoo.com and searches for the customer in Magento.\nIf found, it returns the associated Business Partner's details.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1128
              },
              {
                "type": "django_documented_api",
                "line": 1128
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1128,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "map_customer_to_bp(request)": {
            "docstring": "Map a customer to a business partner.\nThis endpoint updates the assigned_bp relationship for a customer,\nlinking them to the specified Business Partner.\nRequires admin privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1232
              },
              {
                "type": "django_documented_api",
                "line": 1232
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1232,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "create_customer(request)": {
            "docstring": "Create a new customer (buyer) in the UserMapping table.\nThis endpoint is admin-only and adds a customer with role='Buyer' and utypid=3.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1279
              },
              {
                "type": "django_documented_api",
                "line": 1279
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1279,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "sync_new_customers(request)": {
            "docstring": "Sync new customers from Magento to the local UserMapping table.\nThis endpoint is admin-only and adds customers with role='Buyer' and utypid=3\nthat exist in Magento but not in our local database.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1335
              },
              {
                "type": "django_documented_api",
                "line": 1335
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1335,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "list_unassigned_buyers(request)": {
            "docstring": "List all buyers with None or declined BP mapping status.\nOnly accessible to administrators.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1502
              },
              {
                "type": "django_documented_api",
                "line": 1502
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1502,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "list_all_buyers_status(request)": {
            "docstring": "List all buyers with their BP mapping status.\nOnly accessible to administrators.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1543
              },
              {
                "type": "django_documented_api",
                "line": 1543
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1543,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "update_buyer_bp_status(request)": {
            "docstring": "Update a buyer's BP mapping status.\nOnly accessible to administrators.\nValidates that status is consistent with assigned_bp field.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1577
              },
              {
                "type": "django_documented_api",
                "line": 1577
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1577,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "bp_buyer_response(request)": {
            "docstring": "Endpoint for Business Partners to accept or reject a buyer assigned to them.\nIf approved, the buyer's status is updated to 'approved'.\nIf rejected, the buyer's status is updated to 'declined' and assigned_bp is cleared.\nRequired parameters:\n- buyer_uid: The UID of the buyer\n- bp_uid: The UID of the Business Partner responding\n- response: Either 'approve' or 'reject'",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1624
              },
              {
                "type": "django_documented_api",
                "line": 1624
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1624,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "create_admin_user(request)": {
            "docstring": "Create a new administrative user (admin, catalog manager, or support staff).\nRequires administrator privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 1672
              },
              {
                "type": "django_documented_api",
                "line": 1672
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 1672,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          }
        },
        "classes": {
          "HousingSocietyListView": {
            "docstring": "GET /api/auth/housing-societies/",
            "methods": {},
            "base_classes": [
              "generics.ListAPIView"
            ],
            "line_number": 65,
            "is_component": true
          },
          "BuyerLoginView": {
            "docstring": "POST /api/auth/login/buyer/",
            "methods": {
              "post(self, request)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_documented_api",
                    "method": "POST",
                    "line": 101
                  },
                  {
                    "type": "django_http_method",
                    "method": "POST",
                    "line": 101
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 101,
                "decorators": [
                  {
                    "name": "extend_schema"
                  }
                ]
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 75,
            "is_component": true
          },
          "BusinessPartnerLoginView": {
            "docstring": "POST /api/auth/login/business-partner/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 157,
            "is_component": true
          },
          "AdministratorLoginView": {
            "docstring": "POST /api/auth/login/administrator/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 237,
            "is_component": true
          },
          "CatalogManagerLoginView": {
            "docstring": "POST /api/auth/login/catalog-manager/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 317,
            "is_component": true
          },
          "SupportStaffLoginView": {
            "docstring": "POST /api/auth/login/support-staff/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 400,
            "is_component": true
          },
          "LogoutView": {
            "docstring": "POST /api/auth/logout/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 480,
            "is_component": true
          },
          "PasswordResetRequestView": {
            "docstring": "POST /api/auth/password-reset/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 592,
            "is_component": true
          },
          "PasswordResetConfirmView": {
            "docstring": "POST /api/auth/password-reset/confirm/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 685,
            "is_component": true
          },
          "SendOTPView": {
            "docstring": "POST /api/auth/send-otp/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 760,
            "is_component": true
          },
          "VerifyOTPView": {
            "docstring": "POST /api/auth/verify-otp/",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 795,
            "is_component": true
          },
          "BuyerRegistrationView": {
            "docstring": "POST /api/auth/register/",
            "methods": {
              "put(self, request)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "PUT",
                    "line": 833
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 833
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 826,
            "is_component": true
          },
          "UserProfileView": {
            "docstring": "GET /api/users/profile/\nPUT /api/users/profile/\nAllows users to retrieve and update their profile information.",
            "methods": {
              "get(self, request)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_documented_api",
                    "method": "GET",
                    "line": 974
                  },
                  {
                    "type": "django_http_method",
                    "method": "GET",
                    "line": 974
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 974,
                "decorators": [
                  {
                    "name": "extend_schema"
                  }
                ]
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 958,
            "is_component": true
          },
          "AssignBusinessPartnerView": {
            "docstring": "PUT /api/admin/assign-bp/\nAssigns or reassigns a Buyer to a Business Partner.",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 1029,
            "is_component": true
          },
          "AddressViewSet": {
            "docstring": "",
            "methods": {
              "get_queryset(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 1074
              },
              "perform_create(self, serializer)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "serializer"
                ],
                "line_number": 1079
              },
              "perform_update(self, serializer)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "serializer"
                ],
                "line_number": 1086
              },
              "perform_destroy(self, instance)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "instance"
                ],
                "line_number": 1091
              }
            },
            "base_classes": [
              "viewsets.ModelViewSet"
            ],
            "line_number": 1070,
            "is_component": true
          }
        },
        "lines": 1711,
        "characters": 61601,
        "non_empty_lines": 1510,
        "avg_line_length": 36.00292226767972,
        "event_handlers": [
          {
            "type": "onSubmit",
            "event": "form_submit",
            "handler": "post",
            "line": 100,
            "framework": "Django"
          }
        ]
      }
    ],
    "accounts/migrations": [
      {
        "path": "accounts/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "accounts/migrations/0001_initial.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 31,
        "characters": 787,
        "non_empty_lines": 24,
        "avg_line_length": 25.387096774193548
      },
      {
        "path": "accounts/migrations/0002_alter_usermapping_uid_and_more.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 23,
        "characters": 509,
        "non_empty_lines": 17,
        "avg_line_length": 22.130434782608695
      },
      {
        "path": "accounts/migrations/0003_housingsociety.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 31,
        "characters": 849,
        "non_empty_lines": 25,
        "avg_line_length": 27.387096774193548
      },
      {
        "path": "accounts/migrations/0004_otpverification.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 38,
        "characters": 1133,
        "non_empty_lines": 32,
        "avg_line_length": 29.81578947368421
      },
      {
        "path": "accounts/migrations/0005_usermapping_assigned_bp_usermapping_housing_society.py",
        "language": "python",
        "imports": {
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ],
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 31,
        "characters": 814,
        "non_empty_lines": 25,
        "avg_line_length": 26.258064516129032
      },
      {
        "path": "accounts/migrations/0006_bphousingsocietymapping.py",
        "language": "python",
        "imports": {
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ],
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 57,
        "characters": 1804,
        "non_empty_lines": 51,
        "avg_line_length": 31.649122807017545
      },
      {
        "path": "accounts/migrations/0007_address.py",
        "language": "python",
        "imports": {
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ],
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 44,
        "characters": 1424,
        "non_empty_lines": 38,
        "avg_line_length": 32.36363636363637
      },
      {
        "path": "accounts/migrations/0008_alter_usermapping_assigned_bp.py",
        "language": "python",
        "imports": {
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ],
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 27,
        "characters": 675,
        "non_empty_lines": 21,
        "avg_line_length": 25
      },
      {
        "path": "accounts/migrations/0009_bpwarehousemapping.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ],
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 46,
        "characters": 1377,
        "non_empty_lines": 40,
        "avg_line_length": 29.934782608695652
      },
      {
        "path": "accounts/migrations/0010_warehouse.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 31,
        "characters": 841,
        "non_empty_lines": 25,
        "avg_line_length": 27.129032258064516
      },
      {
        "path": "accounts/migrations/0011_fix_bpwarehouse_unique_together.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 18,
        "characters": 358,
        "non_empty_lines": 12,
        "avg_line_length": 19.88888888888889
      },
      {
        "path": "accounts/migrations/0012_usermapping_latlong_usermapping_mobile_number.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 24,
        "characters": 596,
        "non_empty_lines": 18,
        "avg_line_length": 24.833333333333332
      },
      {
        "path": "accounts/migrations/0013_usermapping_bp_map_status.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 31,
        "characters": 851,
        "non_empty_lines": 25,
        "avg_line_length": 27.451612903225808
      }
    ],
    "accounts/tests": [
      {
        "path": "accounts/tests/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "accounts/tests/test_models.py",
        "language": "python",
        "imports": {
          "pytest": [
            "pytest"
          ],
          "django.db": [
            "IntegrityError"
          ],
          "django.urls": [
            "reverse"
          ],
          "rest_framework": [
            "status"
          ],
          "rest_framework.test": [
            "APITestCase"
          ],
          "accounts.models": [
            "HousingSociety",
            "UserMapping"
          ]
        },
        "functions": {
          "test_create_user_mapping(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 12,
            "decorators": [
              {
                "name": "pytest.mark"
              }
            ]
          },
          "test_unique_together_constraint(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 17
          },
          "test_str_method(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 24
          },
          "setUp(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 31
          },
          "test_get_housing_societies(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 34
          }
        },
        "classes": {
          "TestUserMappingModel": {
            "docstring": "",
            "methods": {
              "test_create_user_mapping(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 12,
                "decorators": [
                  {
                    "name": "pytest.mark"
                  }
                ]
              },
              "test_unique_together_constraint(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 18
              },
              "test_str_method(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 25
              }
            },
            "base_classes": [],
            "line_number": 11,
            "decorators": [
              {
                "name": "pytest.mark"
              }
            ]
          },
          "HousingSocietyAPITests": {
            "docstring": "",
            "methods": {
              "setUp(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 31
              },
              "test_get_housing_societies(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 35
              }
            },
            "base_classes": [
              "APITestCase"
            ],
            "line_number": 30
          }
        },
        "lines": 45,
        "characters": 1724,
        "non_empty_lines": 36,
        "avg_line_length": 38.31111111111111
      }
    ],
    "administration": [
      {
        "path": "administration/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "administration/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "administration/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "AdministrationConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 160,
        "non_empty_lines": 4,
        "avg_line_length": 22.857142857142858
      },
      {
        "path": "administration/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "administration/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "administration/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "administration/management/commands": [
      {
        "path": "administration/management/commands/add_warehouse.py",
        "language": "python",
        "imports": {
          "json": [
            "json"
          ],
          "django.core.management.base": [
            "BaseCommand"
          ],
          "accounts.models": [
            "Warehouse"
          ]
        },
        "functions": {
          "add_arguments(self, parser)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "parser"
            ],
            "line_number": 10
          },
          "handle(self, *args, **options)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "*args",
              "**options"
            ],
            "line_number": 24
          },
          "import_from_json(self, json_file)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "json_file"
            ],
            "line_number": 38
          },
          "add_single_warehouse(self, source_code, name, location)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "source_code",
              "name",
              "location"
            ],
            "line_number": 65
          }
        },
        "classes": {
          "Command": {
            "docstring": "",
            "methods": {
              "add_arguments(self, parser)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "parser"
                ],
                "line_number": 11
              },
              "handle(self, *args, **options)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "*args",
                  "**options"
                ],
                "line_number": 25
              },
              "import_from_json(self, json_file)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "json_file"
                ],
                "line_number": 39
              },
              "add_single_warehouse(self, source_code, name, location)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "source_code",
                  "name",
                  "location"
                ],
                "line_number": 66
              }
            },
            "base_classes": [
              "BaseCommand"
            ],
            "line_number": 8
          }
        },
        "lines": 78,
        "characters": 2648,
        "non_empty_lines": 65,
        "avg_line_length": 33.94871794871795,
        "state_changes": [
          {
            "type": "useState",
            "line": 24,
            "variable": "handle",
            "mutation_type": "update"
          }
        ],
        "event_handlers": [
          {
            "type": "dom_event",
            "event": "unknown",
            "handler": "handle",
            "line": 24,
            "framework": "Generic"
          }
        ]
      }
    ],
    "administration/migrations": [
      {
        "path": "administration/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "analytics": [
      {
        "path": "analytics/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "analytics/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "analytics/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "AnalyticsConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 150,
        "non_empty_lines": 4,
        "avg_line_length": 21.428571428571427
      },
      {
        "path": "analytics/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "analytics/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "analytics/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "analytics/migrations": [
      {
        "path": "analytics/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "backend": [
      {
        "path": "backend/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "backend/asgi.py",
        "language": "python",
        "imports": {
          "os": [
            "os"
          ],
          "django.core.asgi": [
            "get_asgi_application"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 17,
        "characters": 391,
        "non_empty_lines": 10,
        "avg_line_length": 23
      },
      {
        "path": "backend/middleware.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "jwt": [
            "jwt"
          ],
          "django.http": [
            "HttpResponse"
          ],
          "accounts.models": [
            "UserMapping"
          ]
        },
        "functions": {
          "__init__(self, get_response)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "get_response"
            ],
            "line_number": 15
          },
          "__call__(self, request)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 26
          }
        },
        "classes": {
          "JWTAuthenticationMiddleware": {
            "docstring": "Middleware to authenticate and set user information based on Magento JWT token.",
            "methods": {
              "__init__(self, get_response)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "get_response"
                ],
                "line_number": 16
              },
              "__call__(self, request)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 27
              }
            },
            "base_classes": [],
            "line_number": 11
          }
        },
        "lines": 81,
        "characters": 3196,
        "non_empty_lines": 67,
        "avg_line_length": 39.45679012345679
      },
      {
        "path": "backend/settings.py",
        "language": "python",
        "imports": {
          "os": [
            "os"
          ],
          "pathlib": [
            "Path"
          ],
          "dotenv": [
            "load_dotenv"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 306,
        "characters": 8333,
        "non_empty_lines": 257,
        "avg_line_length": 27.23202614379085
      },
      {
        "path": "backend/urls.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ],
          "django.urls": [
            "include",
            "path"
          ],
          "drf_spectacular.views": [
            "SpectacularAPIView",
            "SpectacularSwaggerView"
          ],
          "accounts.views": [
            "create_admin_user",
            "customer_lookup"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 27,
        "characters": 1009,
        "non_empty_lines": 24,
        "avg_line_length": 37.370370370370374
      },
      {
        "path": "backend/wsgi.py",
        "language": "python",
        "imports": {
          "os": [
            "os"
          ],
          "django.core.wsgi": [
            "get_wsgi_application"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 17,
        "characters": 391,
        "non_empty_lines": 10,
        "avg_line_length": 23
      }
    ],
    "catalog": [
      {
        "path": "catalog/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "catalog/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ],
          "accounts.models": [
            "Warehouse"
          ],
          ".models": [
            "CatalogManager"
          ]
        },
        "functions": {},
        "classes": {
          "CatalogManagerAdmin": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "admin.ModelAdmin"
            ],
            "line_number": 9,
            "decorators": [
              {
                "name": "admin.register"
              }
            ],
            "is_component": true
          },
          "WarehouseAdmin": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "admin.ModelAdmin"
            ],
            "line_number": 15,
            "decorators": [
              {
                "name": "admin.register"
              }
            ],
            "is_component": true
          }
        },
        "lines": 18,
        "characters": 419,
        "non_empty_lines": 11,
        "avg_line_length": 23.27777777777778
      },
      {
        "path": "catalog/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "CatalogConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 146,
        "non_empty_lines": 4,
        "avg_line_length": 20.857142857142858
      },
      {
        "path": "catalog/cm_serializers.py",
        "language": "python",
        "imports": {
          "rest_framework": [
            "serializers"
          ]
        },
        "functions": {
          "validate_type_id(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 83
          },
          "to_magento_payload(self, validated_data)": {
            "docstring": "Transforms validated input data into the structure required by Magento.\nConstructs both the base payload and the list of custom_attributes.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "validated_data"
            ],
            "line_number": 89
          },
          "get_value(key, default)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "key",
              "default"
            ],
            "line_number": 95
          },
          "to_string(value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "value"
            ],
            "line_number": 98
          },
          "from_magento_payload(self, magento_data)": {
            "docstring": "Reverses the Magento payload structure into a flat dictionary that matches this serializer.\nIt combines top-level fields with custom_attributes and extracts fields from extension_attributes.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "magento_data"
            ],
            "line_number": 216
          },
          "validate_bp_margin(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 296
          },
          "validate_sgst(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 301
          },
          "validate_cgst(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 306
          },
          "validate_igst(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 311
          },
          "validate_cost(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 316
          }
        },
        "classes": {
          "CatalogProductSerializer": {
            "docstring": "",
            "methods": {
              "validate_type_id(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 84
              },
              "to_magento_payload(self, validated_data)": {
                "docstring": "Transforms validated input data into the structure required by Magento.\nConstructs both the base payload and the list of custom_attributes.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "validated_data"
                ],
                "line_number": 90
              },
              "get_value(key, default)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "key",
                  "default"
                ],
                "line_number": 96
              },
              "to_string(value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "value"
                ],
                "line_number": 99
              },
              "from_magento_payload(self, magento_data)": {
                "docstring": "Reverses the Magento payload structure into a flat dictionary that matches this serializer.\nIt combines top-level fields with custom_attributes and extracts fields from extension_attributes.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "magento_data"
                ],
                "line_number": 217
              },
              "validate_bp_margin(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 297
              },
              "validate_sgst(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 302
              },
              "validate_cgst(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 307
              },
              "validate_igst(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 312
              },
              "validate_cost(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 317
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 10,
            "is_component": true
          },
          "CatalogManagerProfileSerializer": {
            "docstring": "Serializer for retrieving and updating Catalog Manager profile information.",
            "methods": {},
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 323,
            "is_component": true
          }
        },
        "lines": 335,
        "characters": 13581,
        "non_empty_lines": 307,
        "avg_line_length": 40.54029850746269
      },
      {
        "path": "catalog/cm_views.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "datetime": [
            "datetime"
          ],
          "django.core.cache": [
            "cache"
          ],
          "rest_framework": [
            "status"
          ],
          "rest_framework.generics": [
            "RetrieveUpdateAPIView"
          ],
          "rest_framework.permissions": [
            "AllowAny",
            "IsAuthenticated"
          ],
          "rest_framework.response": [
            "Response"
          ],
          "rest_framework.views": [
            "APIView"
          ],
          "accounts.permissions": [
            "IsCatalogManager"
          ],
          "catalog.cm_serializers": [
            "CatalogManagerProfileSerializer",
            "CatalogProductSerializer"
          ],
          "catalog.models": [
            "CatalogManager"
          ],
          "core.magento": [
            "magento_api_call"
          ],
          ".utils": [
            "build_search_criteria_for_dates_and_sku",
            "flatten_product_data",
            "force_serializer"
          ],
          "rest_framework.exceptions": [
            "NotFound"
          ]
        },
        "functions": {
          "get(self, request)": {
            "docstring": "GET /api/cm/dashboard\nReturns summary metrics for the Catalog Manager dashboard.\nFor demonstration, it returns total products and total inventory.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "GET",
                "line": 41
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 41
          },
          "get(self, request, sku)": {
            "docstring": "GET /api/cm/products/<sku>/\nRetrieves products from Magento filtered by a SKU.\nExample: /api/cm/products/bazootest001/",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "GET",
                "line": 149
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "sku"
            ],
            "line_number": 149
          },
          "_get_all_subcategory_ids(self, category_id)": {
            "docstring": "Helper method to recursively get all subcategory IDs",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "category_id"
            ],
            "line_number": 176
          },
          "post(self, request)": {
            "docstring": "POST /api/cm/products\nCreates a new product in Magento.\nValidates the request using CatalogProductSerializer; then\ntransforms and forwards the data to Magento.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "POST",
                "line": 285
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 285
          },
          "put(self, request, sku)": {
            "docstring": "PUT /api/cm/products/{sku}\nUpdates an existing product in Magento. If 'sku' is provided in the URL, it is used;\notherwise, the SKU from the JSON payload is used.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "PUT",
                "line": 323
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "sku"
            ],
            "line_number": 323
          },
          "patch(self, request, sku)": {
            "docstring": "PATCH /api/cm/products/{sku}\nPartially updates an existing product by merging provided fields with existing data.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "PATCH",
                "line": 336
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "sku"
            ],
            "line_number": 336
          },
          "get_object(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 554
          },
          "update(self, request, *args, **kwargs)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "*args",
              "**kwargs"
            ],
            "line_number": 564
          },
          "_get_category_tree(self, category_id)": {
            "docstring": "Helper method to recursively build category tree\nNow also fetches children using parent_id filter",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "category_id"
            ],
            "line_number": 675
          },
          "get(self, request, *args, **kwargs)": {
            "docstring": "Three distinct endpoints:\n1. GET /api/cm/category[/<category_id>] - Get category details\n2. GET /api/cm/category/products?category_ids=2,3,7,8 - Get products by category IDs\n3. GET /api/cm/category/tree?root_id=<category_id> - Get full category tree",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "GET",
                "line": 724
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "*args",
              "**kwargs"
            ],
            "line_number": 724
          },
          "_create_category(self, request)": {
            "docstring": "Creates a new category in Magento",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 817
          },
          "_assign_products_to_category(self, request)": {
            "docstring": "Assigns multiple products to a category",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 855
          },
          "put(self, request, category_id)": {
            "docstring": "PUT /api/cm/category/<category_id>\nUpdates an existing category in Magento.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "PUT",
                "line": 870
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "category_id"
            ],
            "line_number": 870
          },
          "_has_subcategories(self, category_id)": {
            "docstring": "Check if category has any subcategories\nReturns (bool, list of subcategories)",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "category_id"
            ],
            "line_number": 905
          },
          "delete(self, request, category_id)": {
            "docstring": "DELETE /api/cm/category/<category_id>\nDeletes a category if it has no subcategories.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "DELETE",
                "line": 929
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "category_id"
            ],
            "line_number": 929
          }
        },
        "classes": {
          "DashboardView": {
            "docstring": "GET /api/cm/dashboard\nReturns summary metrics for the Catalog Manager dashboard.\nFor demonstration, it returns total products and total inventory.",
            "methods": {
              "get(self, request)": {
                "docstring": "GET /api/cm/dashboard\nReturns summary metrics for the Catalog Manager dashboard.\nFor demonstration, it returns total products and total inventory.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "GET",
                    "line": 42
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 42
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 39,
            "is_component": true
          },
          "ProductListView": {
            "docstring": "GET /api/cm/products/\nRetrieves a list of products from Magento with only selected attributes.\nIt supports pagination via the following query parameters:\n- pageSize (default: 10)\n- currentPage (default: 1)\nExample:\ncurl -X GET \"http://localhost:8000/api/cm/products/?pageSize=4&currentPage=1\"\n-H \"Authorization: Bearer <token>\"\nThe Magento API is called with an additional 'fields' query parameter,\nensuring only items[id,sku,name,price,status] and total_count are returned.",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 100,
            "is_component": true
          },
          "ProductBySKUView": {
            "docstring": "GET /api/cm/products/<sku>/\nRetrieves products from Magento filtered by a SKU.\nExample: /api/cm/products/bazootest001/",
            "methods": {
              "get(self, request, sku)": {
                "docstring": "GET /api/cm/products/<sku>/\nRetrieves products from Magento filtered by a SKU.\nExample: /api/cm/products/bazootest001/",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "GET",
                    "line": 150
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "sku"
                ],
                "line_number": 150
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 147,
            "is_component": true
          },
          "CatalogProductView": {
            "docstring": "Helper method to recursively get all subcategory IDs",
            "methods": {
              "_get_all_subcategory_ids(self, category_id)": {
                "docstring": "Helper method to recursively get all subcategory IDs",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "category_id"
                ],
                "line_number": 177
              },
              "post(self, request)": {
                "docstring": "POST /api/cm/products\nCreates a new product in Magento.\nValidates the request using CatalogProductSerializer; then\ntransforms and forwards the data to Magento.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "POST",
                    "line": 286
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 286
              },
              "put(self, request, sku)": {
                "docstring": "PUT /api/cm/products/{sku}\nUpdates an existing product in Magento. If 'sku' is provided in the URL, it is used;\notherwise, the SKU from the JSON payload is used.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "PUT",
                    "line": 324
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "sku"
                ],
                "line_number": 324
              },
              "patch(self, request, sku)": {
                "docstring": "PATCH /api/cm/products/{sku}\nPartially updates an existing product by merging provided fields with existing data.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "PATCH",
                    "line": 337
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "sku"
                ],
                "line_number": 337
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 174,
            "is_component": true
          },
          "InventoryView": {
            "docstring": "GET /api/cm/inventory\nRetrieves inventory source items from Magento.\nAllows filtering by SKU.",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 400,
            "is_component": true
          },
          "ProfileView": {
            "docstring": "",
            "methods": {
              "get_object(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 555
              },
              "update(self, request, *args, **kwargs)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 565
              }
            },
            "base_classes": [
              "RetrieveUpdateAPIView"
            ],
            "line_number": 550,
            "is_component": true
          },
          "ReportsView": {
            "docstring": "GET /api/cm/reports\nGenerates a performance report, aggregating sales and inventory information.\nAccepts optional query parameters: date_from, date_to, sku.",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 576,
            "is_component": true
          },
          "CategoryView": {
            "docstring": "Helper method to recursively build category tree\nNow also fetches children using parent_id filter",
            "methods": {
              "_get_category_tree(self, category_id)": {
                "docstring": "Helper method to recursively build category tree\nNow also fetches children using parent_id filter",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "category_id"
                ],
                "line_number": 676
              },
              "get(self, request, *args, **kwargs)": {
                "docstring": "Three distinct endpoints:\n1. GET /api/cm/category[/<category_id>] - Get category details\n2. GET /api/cm/category/products?category_ids=2,3,7,8 - Get products by category IDs\n3. GET /api/cm/category/tree?root_id=<category_id> - Get full category tree",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "GET",
                    "line": 725
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 725
              },
              "_create_category(self, request)": {
                "docstring": "Creates a new category in Magento",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 818
              },
              "_assign_products_to_category(self, request)": {
                "docstring": "Assigns multiple products to a category",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 856
              },
              "put(self, request, category_id)": {
                "docstring": "PUT /api/cm/category/<category_id>\nUpdates an existing category in Magento.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "PUT",
                    "line": 871
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "category_id"
                ],
                "line_number": 871
              },
              "_has_subcategories(self, category_id)": {
                "docstring": "Check if category has any subcategories\nReturns (bool, list of subcategories)",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "category_id"
                ],
                "line_number": 906
              },
              "delete(self, request, category_id)": {
                "docstring": "DELETE /api/cm/category/<category_id>\nDeletes a category if it has no subcategories.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "DELETE",
                    "line": 930
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "category_id"
                ],
                "line_number": 930
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 673,
            "is_component": true
          }
        },
        "lines": 992,
        "characters": 37068,
        "non_empty_lines": 883,
        "avg_line_length": 37.36693548387097,
        "event_handlers": [
          {
            "type": "onSubmit",
            "event": "form_submit",
            "handler": "post",
            "line": 285,
            "framework": "Django"
          }
        ]
      },
      {
        "path": "catalog/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ],
          "accounts.models": [
            "UserMapping",
            "Warehouse"
          ]
        },
        "functions": {
          "__str__(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 11
          }
        },
        "classes": {
          "CatalogManager": {
            "docstring": "",
            "methods": {
              "__str__(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 12
              }
            },
            "base_classes": [
              "models.Model"
            ],
            "line_number": 6,
            "is_component": true
          }
        },
        "lines": 14,
        "characters": 403,
        "non_empty_lines": 9,
        "avg_line_length": 28.785714285714285,
        "state_changes": [
          {
            "type": "django_create",
            "line": 6,
            "variable": "catalogmanager",
            "mutation_type": "create"
          }
        ]
      },
      {
        "path": "catalog/serializers.py",
        "language": "python",
        "imports": {
          "html": [
            "html"
          ],
          "rest_framework": [
            "serializers"
          ],
          "rest_framework.exceptions": [
            "ValidationError"
          ],
          "core.magento": [
            "magento_api_call"
          ]
        },
        "functions": {
          "validate_type_id(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 28
          },
          "validate_sku(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 33
          },
          "validate_name(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 42
          },
          "validate_quantity(self, value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 53
          }
        },
        "classes": {
          "ProductSerializer": {
            "docstring": "",
            "methods": {
              "validate_type_id(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 29
              },
              "validate_sku(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 34
              },
              "validate_name(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 43
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 9,
            "is_component": true
          },
          "InventoryAdjustmentSerializer": {
            "docstring": "",
            "methods": {
              "validate_quantity(self, value)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 54
              }
            },
            "base_classes": [
              "serializers.Serializer"
            ],
            "line_number": 49,
            "is_component": true
          }
        },
        "lines": 57,
        "characters": 2216,
        "non_empty_lines": 46,
        "avg_line_length": 38.87719298245614
      },
      {
        "path": "catalog/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "catalog/urls_cm.py",
        "language": "python",
        "imports": {
          "django.urls": [
            "path"
          ],
          "catalog.cm_views": [
            "CatalogProductView",
            "CategoryView",
            "DashboardView",
            "InventoryView",
            "ProductBySKUView",
            "ProductListView",
            "ProfileView",
            "ReportsView"
          ],
          "catalog.views": [
            "ProductListView as ProductListGenericView"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 50,
        "characters": 1642,
        "non_empty_lines": 46,
        "avg_line_length": 32.84
      },
      {
        "path": "catalog/urls.py",
        "language": "python",
        "imports": {
          "django.urls": [
            "path"
          ],
          ".views": [
            "CatalogManagerProductView",
            "InventoryAdjustmentView",
            "ProductListView"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 12,
        "characters": 401,
        "non_empty_lines": 9,
        "avg_line_length": 33.416666666666664
      },
      {
        "path": "catalog/utils.py",
        "language": "python",
        "imports": {
          "hashlib": [
            "hashlib"
          ],
          "logging": [
            "logging"
          ],
          "urllib.parse": [
            "urllib.parse"
          ],
          "datetime": [
            "datetime"
          ],
          "decimal": [
            "Decimal"
          ],
          "typing": [
            "Any",
            "Dict",
            "List"
          ],
          "django.core.cache": [
            "cache"
          ],
          "catalog.models": [
            "CatalogManager"
          ],
          "core.magento": [
            "magento_api_call"
          ]
        },
        "functions": {
          "force_serializer(data)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "data"
            ],
            "line_number": 16
          },
          "to_decimal(value, default)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "value",
              "default"
            ],
            "line_number": 19
          },
          "ensure_string(value, default)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "value",
              "default"
            ],
            "line_number": 26
          },
          "to_int(value, default)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "value",
              "default"
            ],
            "line_number": 31
          },
          "to_datetime(value)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "value"
            ],
            "line_number": 39
          },
          "flatten_product_data(items)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "items"
            ],
            "line_number": 99
          },
          "log_inventory_adjustments(user_id: str, success: list, failed: list)": {
            "docstring": "Logs inventory adjustment actions for auditing purposes.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "user_id: str",
              "success: list",
              "failed: list"
            ],
            "line_number": 156
          },
          "log_product_action(user_id: str, action: str, sku: str, details: str)": {
            "docstring": "Logs product management actions for auditing purposes.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "user_id: str",
              "action: str",
              "sku: str",
              "details: str"
            ],
            "line_number": 166
          },
          "get_catalog_manager_assigned_warehouses(user_uid: str)": {
            "docstring": "Retrieves the list of warehouses assigned to the Catalog Manager.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "user_uid: str"
            ],
            "line_number": 173
          },
          "generate_cache_key_products(sku_list: list, params: dict)": {
            "docstring": "Generates a unique cache key based on SKUs and query parameters.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "sku_list: list",
              "params: dict"
            ],
            "line_number": 186
          },
          "get_products_by_skus(sku_list: List[str], params: Dict[str, Any])": {
            "docstring": "Retrieves product details from Magento based on a list of SKUs.\nArgs:\nsku_list (List[str]): List of product SKUs to retrieve.\nparams (Dict[str, Any], optional): Additional parameters for filtering, sorting, and pagination.\nReturns:\nDict[str, Any]: A dictionary containing the aggregated product data and metadata.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "sku_list: List[str]",
              "params: Dict[str",
              "Any]"
            ],
            "line_number": 206
          },
          "build_search_criteria_for_dates_and_sku(sku: str, date_from: str, date_to: str)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "sku: str",
              "date_from: str",
              "date_to: str"
            ],
            "line_number": 284
          }
        },
        "classes": {},
        "lines": 318,
        "characters": 11388,
        "non_empty_lines": 268,
        "avg_line_length": 35.81132075471698,
        "state_changes": [
          {
            "type": "useState",
            "line": 173,
            "variable": "get_catalog_manager_assigned_warehouses",
            "mutation_type": "update"
          }
        ]
      },
      {
        "path": "catalog/views.py",
        "language": "python",
        "imports": {
          "base64": [
            "base64"
          ],
          "logging": [
            "logging"
          ],
          "drf_spectacular.types": [
            "OpenApiTypes"
          ],
          "drf_spectacular.utils": [
            "OpenApiExample",
            "OpenApiParameter",
            "extend_schema"
          ],
          "rest_framework": [
            "filters",
            "generics",
            "status"
          ],
          "rest_framework.parsers": [
            "FormParser",
            "MultiPartParser"
          ],
          "rest_framework.permissions": [
            "AllowAny",
            "IsAuthenticated"
          ],
          "rest_framework.response": [
            "Response"
          ],
          "rest_framework.views": [
            "APIView"
          ],
          "accounts.permissions": [
            "IsCatalogManager"
          ],
          "accounts.utils": [
            "get_buyer_warehouses"
          ],
          "core.magento": [
            "magento_api_call"
          ],
          "integration.utils": [
            "get_cached_source_items"
          ],
          ".cm_serializers": [
            "CatalogProductSerializer"
          ],
          ".serializers": [
            "InventoryAdjustmentSerializer",
            "ProductSerializer"
          ],
          ".utils": [
            "get_catalog_manager_assigned_warehouses",
            "get_products_by_skus",
            "log_inventory_adjustments",
            "log_product_action"
          ]
        },
        "functions": {
          "get(self, request, *args, **kwargs)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_documented_api",
                "method": "GET",
                "line": 84
              },
              {
                "type": "django_http_method",
                "method": "GET",
                "line": 84
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "*args",
              "**kwargs"
            ],
            "line_number": 84,
            "decorators": [
              {
                "name": "extend_schema"
              }
            ]
          },
          "post(self, request, *args, **kwargs)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "POST",
                "line": 282
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "*args",
              "**kwargs"
            ],
            "line_number": 282
          },
          "put(self, request, product_sku, *args, **kwargs)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "PUT",
                "line": 571
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "product_sku",
              "*args",
              "**kwargs"
            ],
            "line_number": 571
          }
        },
        "classes": {
          "ProductPerformanceReportView": {
            "docstring": "GET /api/cm/reports/\nProvides real-time product performance reports to Catalog Managers.\nSupports optional filters such as date range and product SKU.",
            "methods": {
              "get(self, request, *args, **kwargs)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_documented_api",
                    "method": "GET",
                    "line": 85
                  },
                  {
                    "type": "django_http_method",
                    "method": "GET",
                    "line": 85
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 85,
                "decorators": [
                  {
                    "name": "extend_schema"
                  }
                ]
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 29,
            "is_component": true
          },
          "InventoryAdjustmentView": {
            "docstring": "POST /api/cm/inventory/\nAllows Catalog Managers to adjust inventory levels for products in their assigned warehouses.\nSupports both single and bulk inventory adjustments.",
            "methods": {
              "post(self, request, *args, **kwargs)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "POST",
                    "line": 282
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 282
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 211,
            "is_component": true
          },
          "ProductListView": {
            "docstring": "GET /api/catalog/products/\nRetrieves a list of products available to the authenticated Buyer based on their assigned warehouses.\nSupports pagination, sorting, and searching.",
            "methods": {},
            "base_classes": [
              "generics.GenericAPIView"
            ],
            "line_number": 439,
            "is_component": true
          },
          "CatalogManagerProductDetailView": {
            "docstring": "PUT /api/cm/products/{product_sku}/\nAllows Catalog Managers to update existing products in their assigned warehouses.",
            "methods": {
              "put(self, request, product_sku, *args, **kwargs)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "PUT",
                    "line": 571
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "product_sku",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 571
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 525,
            "is_component": true
          },
          "CatalogManagerProductView": {
            "docstring": "POST /api/cm/products/\nAllows Catalog Managers to add new products to their assigned warehouses.",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 803,
            "is_component": true
          }
        },
        "lines": 1024,
        "characters": 39360,
        "non_empty_lines": 934,
        "avg_line_length": 38.4375
      }
    ],
    "catalog/migrations": [
      {
        "path": "catalog/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "catalog/migrations/0001_initial.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ],
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 45,
        "characters": 1219,
        "non_empty_lines": 38,
        "avg_line_length": 27.08888888888889
      }
    ],
    "core": [
      {
        "path": "core/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "core/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "core/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "CoreConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 140,
        "non_empty_lines": 4,
        "avg_line_length": 20
      },
      {
        "path": "core/magento.py",
        "language": "python",
        "imports": {
          "inspect": [
            "inspect"
          ],
          "logging": [
            "logging"
          ],
          "traceback": [
            "traceback"
          ],
          "requests": [
            "requests"
          ],
          "django.conf": [
            "settings"
          ],
          "oauthlib.oauth1": [
            "SIGNATURE_HMAC_SHA256"
          ],
          "requests.adapters": [
            "HTTPAdapter"
          ],
          "requests.packages.urllib3.util.retry": [
            "Retry"
          ],
          "requests_oauthlib": [
            "OAuth1"
          ]
        },
        "functions": {
          "magento_api_call(method: str, endpoint: str, payload: dict, token: str, params: dict, use_oauth: bool)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "method: str",
              "endpoint: str",
              "payload: dict",
              "token: str",
              "params: dict",
              "use_oauth: bool"
            ],
            "line_number": 15
          },
          "magento_api_call_with_admin(method: str, endpoint: str, payload: dict, params: dict)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "method: str",
              "endpoint: str",
              "payload: dict",
              "params: dict"
            ],
            "line_number": 160
          }
        },
        "classes": {},
        "lines": 244,
        "characters": 8772,
        "non_empty_lines": 219,
        "avg_line_length": 35.950819672131146
      },
      {
        "path": "core/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "core/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "core/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "core/migrations": [
      {
        "path": "core/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "integration": [
      {
        "path": "integration/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "integration/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "integration/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "IntegrationConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 154,
        "non_empty_lines": 4,
        "avg_line_length": 22
      },
      {
        "path": "integration/azure_storage.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "datetime": [
            "datetime",
            "timedelta"
          ],
          "azure.storage.blob": [
            "BlobSasPermissions",
            "BlobServiceClient",
            "generate_blob_sas"
          ],
          "django.conf": [
            "settings"
          ]
        },
        "functions": {
          "get_blob_service_client()": {
            "docstring": "Get a BlobServiceClient using the connection string from settings.\nReturns:\nBlobServiceClient: The client for Azure Blob Storage operations\nRaises:\nException: If there's an error creating the client",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 12
          },
          "upload_file_to_blob(file_content, blob_name, content_type, overwrite)": {
            "docstring": "Upload a file to Azure Blob Storage.\nArgs:\nfile_content (bytes): The content of the file to upload\nblob_name (str): The name to give the blob\ncontent_type (str, optional): The content type of the blob. Defaults to 'application/pdf'.\noverwrite (bool, optional): Whether to overwrite existing blob. Defaults to True.\nReturns:\nbool: True if successful, False otherwise",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "file_content",
              "blob_name",
              "content_type",
              "overwrite"
            ],
            "line_number": 31
          },
          "generate_blob_sas_url(blob_name, expiry_hours)": {
            "docstring": "Generate a SAS URL for a blob with read permissions.\nArgs:\nblob_name (str): The name of the blob\nexpiry_hours (int, optional): Hours until the SAS token expires. Defaults to 24.\nReturns:\nstr: SAS URL for the blob\nRaises:\nException: If there's an error generating the SAS URL",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "blob_name",
              "expiry_hours"
            ],
            "line_number": 63
          },
          "check_blob_exists(blob_name)": {
            "docstring": "Check if a blob exists in the container.\nArgs:\nblob_name (str): The name of the blob\nReturns:\nbool: True if the blob exists, False otherwise",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "blob_name"
            ],
            "line_number": 100
          },
          "get_sas_url_for_order_pdf(order_id: int, expiry_hours)": {
            "docstring": "Get a SAS URL for an invoice PDF by order ID.\nArgs:\norder_id (int): Order ID for the PDF\nexpiry_hours (int, optional): Hours until the SAS token expires. Defaults to 24.\nReturns:\nstr: SAS URL for the blob, or None if error",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "order_id: int",
              "expiry_hours"
            ],
            "line_number": 123
          },
          "download_blob_to_bytes(blob_name, container_name)": {
            "docstring": "Download a blob from Azure Blob Storage and return it as bytes.\nArgs:\nblob_name (str): The name of the blob to download\ncontainer_name (str, optional): Container name. Defaults to settings.AZURE_STORAGE_CONTAINER_NAME.\nReturns:\nbytes: The blob content as bytes, or None if error",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "blob_name",
              "container_name"
            ],
            "line_number": 142
          }
        },
        "classes": {},
        "lines": 181,
        "characters": 5800,
        "non_empty_lines": 145,
        "avg_line_length": 32.04419889502763
      },
      {
        "path": "integration/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "integration/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "integration/utils.py",
        "language": "python",
        "imports": {
          "hashlib # Added import for hashlib Issue 2": [
            "hashlib # Added import for hashlib Issue 2"
          ],
          "logging": [
            "logging"
          ],
          "math # For batching source codes Issue 1": [
            "math # For batching source codes Issue 1"
          ],
          "django.conf": [
            "settings"
          ],
          "django.core.cache": [
            "cache"
          ],
          "core.magento": [
            "magento_api_call"
          ]
        },
        "functions": {
          "get_cached_warehouses()": {
            "docstring": "Retrieves warehouse (source) data from Redis cache or Magento API if not cached.\nReturns:\nList of warehouses if successful, else an empty list.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 17
          },
          "generate_cache_key_source_items(source_codes: list)": {
            "docstring": "Generates a unique cache key for source items based on source_codes.\nArgs:\nsource_codes (list): List of source codes.\nReturns:\nstr: A unique cache key.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "source_codes: list"
            ],
            "line_number": 48
          },
          "get_cached_source_items(source_codes: list)": {
            "docstring": "Retrieves source item (inventory) data from Redis cache or Magento API if not cached.\nArgs:\nsource_codes (list): List of source codes to fetch inventory for.\nReturns:\nList of source items if successful, else an empty list.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "source_codes: list"
            ],
            "line_number": 64
          }
        },
        "classes": {},
        "lines": 132,
        "characters": 4988,
        "non_empty_lines": 112,
        "avg_line_length": 37.78787878787879
      },
      {
        "path": "integration/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "integration/migrations": [
      {
        "path": "integration/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "invoices": [
      {
        "path": "invoices/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "invoices/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ],
          ".models": [
            "Invoice",
            "InvoiceItem"
          ]
        },
        "functions": {
          "has_add_permission(self, request, obj)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "obj"
            ],
            "line_number": 28
          },
          "has_delete_permission(self, request, obj)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "obj"
            ],
            "line_number": 31
          },
          "has_add_permission(self, request)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 87
          }
        },
        "classes": {
          "InvoiceItemInline": {
            "docstring": "",
            "methods": {
              "has_add_permission(self, request, obj)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "obj"
                ],
                "line_number": 29
              },
              "has_delete_permission(self, request, obj)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "obj"
                ],
                "line_number": 32
              }
            },
            "base_classes": [
              "admin.TabularInline"
            ],
            "line_number": 6
          },
          "InvoiceAdmin": {
            "docstring": "",
            "methods": {
              "has_add_permission(self, request)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 88
              }
            },
            "base_classes": [
              "admin.ModelAdmin"
            ],
            "line_number": 37,
            "decorators": [
              {
                "name": "admin.register"
              }
            ],
            "is_component": true
          }
        },
        "lines": 90,
        "characters": 2108,
        "non_empty_lines": 81,
        "avg_line_length": 23.42222222222222
      },
      {
        "path": "invoices/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "InvoicesConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 8,
        "characters": 178,
        "non_empty_lines": 5,
        "avg_line_length": 22.25
      },
      {
        "path": "invoices/exceptions.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {
          "FetchError": {
            "docstring": "Exception raised when fetching invoices from Magento fails.",
            "methods": {},
            "base_classes": [
              "Exception"
            ],
            "line_number": 1
          }
        },
        "lines": 5,
        "characters": 109,
        "non_empty_lines": 3,
        "avg_line_length": 21.8
      },
      {
        "path": "invoices/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {
          "__str__(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 56
          }
        },
        "classes": {
          "Invoice": {
            "docstring": "Model representing invoice data from Magento.",
            "methods": {
              "__str__(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 57
              }
            },
            "base_classes": [
              "models.Model"
            ],
            "line_number": 4,
            "is_component": true
          },
          "Meta": {
            "docstring": "",
            "methods": {},
            "base_classes": [],
            "line_number": 60
          },
          "InvoiceItem": {
            "docstring": "Model representing line items in an invoice, with enriched tax data.",
            "methods": {},
            "base_classes": [
              "models.Model"
            ],
            "line_number": 70,
            "is_component": true
          }
        },
        "lines": 124,
        "characters": 4614,
        "non_empty_lines": 103,
        "avg_line_length": 37.20967741935484,
        "state_changes": [
          {
            "type": "django_create",
            "line": 4,
            "variable": "invoice",
            "mutation_type": "create"
          },
          {
            "type": "django_create",
            "line": 70,
            "variable": "invoiceitem",
            "mutation_type": "create"
          }
        ]
      },
      {
        "path": "invoices/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "invoices/urls.py",
        "language": "python",
        "imports": {
          "django.urls": [
            "path"
          ],
          ".": [
            "views"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 27,
        "characters": 616,
        "non_empty_lines": 23,
        "avg_line_length": 22.814814814814813
      },
      {
        "path": "invoices/views.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "typing": [
            "Dict",
            "List"
          ],
          "django.db": [
            "transaction"
          ],
          "rest_framework": [
            "status"
          ],
          "rest_framework.permissions": [
            "AllowAny"
          ],
          "rest_framework.response": [
            "Response"
          ],
          "rest_framework.views": [
            "APIView"
          ],
          "accounts.models": [
            "UserMapping"
          ],
          "partners.models": [
            "BusinessPartnerProfile"
          ],
          "core.magento": [
            "magento_api_call_with_admin"
          ],
          "invoices.services.batch_pdf": [
            "format_address",
            "batch_process_invoices",
            "get_multiple_invoice_pdf_urls"
          ],
          "invoices.exceptions": [
            "FetchError"
          ],
          "invoices.services": [
            "enrich_invoice_items",
            "fetch_new_invoices",
            "generate_and_upload_pdf",
            "get_invoice_pdf_url",
            "get_last_processed_entity_id",
            "persist_invoice"
          ],
          ".models": [
            "Invoice",
            "InvoiceItem"
          ]
        },
        "functions": {
          "post(self, request)": {
            "docstring": "Handle POST requests to generate invoice PDFs in batch.\nReturns:\nResponse: JSON response with processing results",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "POST",
                "line": 42
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 42
          },
          "get(self, request, order_id)": {
            "docstring": "Handle GET requests to retrieve an invoice PDF URL.\nArgs:\nrequest: The HTTP request\norder_id: The order ID to lookup\nReturns:\nResponse: JSON response with the PDF URL or appropriate error",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_http_method",
                "method": "GET",
                "line": 88
              }
            ],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "order_id"
            ],
            "line_number": 88
          }
        },
        "classes": {
          "BatchGenerateInvoiceView": {
            "docstring": "API view to batch generate invoices PDFs from Magento.\nFetches new invoices, enriches them with tax data, persists to database,\nand generates PDFs stored in Azure Blob Storage.",
            "methods": {
              "post(self, request)": {
                "docstring": "Handle POST requests to generate invoice PDFs in batch.\nReturns:\nResponse: JSON response with processing results",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "POST",
                    "line": 43
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 43
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 33,
            "is_component": true
          },
          "GetInvoicePdfView": {
            "docstring": "API view to get a PDF URL for an invoice by order ID.\nThis endpoint retrieves a pre-signed URL for an invoice PDF.\nIf the invoice exists but the PDF doesn't, it will generate one.\nReturns 404 if the invoice doesn't exist.",
            "methods": {
              "get(self, request, order_id)": {
                "docstring": "Handle GET requests to retrieve an invoice PDF URL.\nArgs:\nrequest: The HTTP request\norder_id: The order ID to lookup\nReturns:\nResponse: JSON response with the PDF URL or appropriate error",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [
                  {
                    "type": "django_http_method",
                    "method": "GET",
                    "line": 89
                  }
                ],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "order_id"
                ],
                "line_number": 89
              }
            },
            "base_classes": [
              "APIView"
            ],
            "line_number": 76,
            "is_component": true
          },
          "GetShippingLabelDetailsView": {
            "docstring": "API view to get shipping label details for an order by order ID.\nReturns 404 if the order doesn't exist.",
            "methods": {},
            "base_classes": [
              "APIView"
            ],
            "line_number": 134,
            "is_component": true
          }
        },
        "lines": 280,
        "characters": 10199,
        "non_empty_lines": 227,
        "avg_line_length": 36.425,
        "event_handlers": [
          {
            "type": "onSubmit",
            "event": "form_submit",
            "handler": "post",
            "line": 42,
            "framework": "Django"
          }
        ]
      }
    ],
    "invoices/migrations": [
      {
        "path": "invoices/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "invoices/migrations/0001_initial.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ],
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 222,
        "characters": 8116,
        "non_empty_lines": 215,
        "avg_line_length": 36.55855855855856
      },
      {
        "path": "invoices/migrations/0002_invoice_grand_total.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 6
          }
        },
        "lines": 23,
        "characters": 473,
        "non_empty_lines": 17,
        "avg_line_length": 20.565217391304348
      },
      {
        "path": "invoices/migrations/0003_copy_base_grand_total_to_grand_total.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations"
          ]
        },
        "functions": {
          "copy_base_grand_total_to_grand_total(apps, schema_editor)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "apps",
              "schema_editor"
            ],
            "line_number": 4
          },
          "reverse_migration(apps, schema_editor)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "apps",
              "schema_editor"
            ],
            "line_number": 15
          }
        },
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 22
          }
        },
        "lines": 34,
        "characters": 901,
        "non_empty_lines": 24,
        "avg_line_length": 26.5
      }
    ],
    "invoices/services": [
      {
        "path": "invoices/services/__init__.py",
        "language": "python",
        "imports": {
          ".enrich": [
            "enrich_invoice_items"
          ],
          ".fetch": [
            "fetch_new_invoices"
          ],
          ".pdf": [
            "generate_and_upload_pdf",
            "get_invoice_pdf_url"
          ],
          ".persist": [
            "persist_invoice"
          ],
          ".utils": [
            "get_last_processed_entity_id"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 15,
        "characters": 412,
        "non_empty_lines": 13,
        "avg_line_length": 27.466666666666665
      },
      {
        "path": "invoices/services/batch_pdf.py",
        "language": "python",
        "imports": {
          "io": [
            "io"
          ],
          "logging": [
            "logging"
          ],
          "datetime": [
            "datetime"
          ],
          "decimal": [
            "Decimal"
          ],
          "typing": [
            "Dict",
            "List",
            "Optional",
            "Tuple"
          ],
          "django.db": [
            "transaction"
          ],
          "django.db.models": [
            "Max"
          ],
          "core.magento": [
            "magento_api_call_with_admin"
          ],
          "integration.azure_storage": [
            "download_blob_to_bytes",
            "generate_blob_sas_url",
            "upload_file_to_blob"
          ],
          "invoices.models": [
            "Invoice",
            "InvoiceItem"
          ],
          "invoices.services.enrich": [
            "enrich_invoice_items"
          ],
          "invoices.services.fetch": [
            "fetch_new_invoices"
          ],
          "invoices.services.pdf": [
            "IMAGES_CONTAINER",
            "LOGO_BLOB_NAME",
            "SIGNATURE_BLOB_NAME",
            "generate_invoice_pdf"
          ],
          "invoices.services.persist": [
            "persist_invoice"
          ]
        },
        "functions": {
          "get_order_details(order_id: int)": {
            "docstring": "Fetch order details from Magento including addresses.\nArgs:\norder_id (int): The order ID to fetch\nReturns:\nDict: Order details with addresses",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "order_id: int"
            ],
            "line_number": 32
          },
          "format_address(address_data: Dict)": {
            "docstring": "Format address data from Magento for PDF generation.\nArgs:\naddress_data (Dict): Raw address data from Magento\nReturns:\nDict: Formatted address",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "address_data: Dict"
            ],
            "line_number": 56
          },
          "build_invoice_data_from_magento(invoice: Invoice)": {
            "docstring": "Build invoice data using only data available from Magento API calls.\nArgs:\ninvoice (Invoice): The invoice model instance\nReturns:\nDict: Invoice data ready for PDF generation",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "invoice: Invoice"
            ],
            "line_number": 110
          },
          "batch_process_invoices()": {
            "docstring": "Comprehensive batch processing for invoices:\n1. Fetch new invoices from Magento\n2. Enrich with tax data\n3. Persist to database\n4. Generate PDFs in batch\nReturns:\nDict: Processing results summary",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 258
          },
          "get_multiple_invoice_pdf_urls(order_ids: List[int])": {
            "docstring": "Get PDF URLs for multiple invoices by order IDs.\nArgs:\norder_ids: List of order IDs to look up\nReturns:\nDict[int, str]: Dictionary mapping order IDs to PDF URLs",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "order_ids: List[int]"
            ],
            "line_number": 417
          }
        },
        "classes": {},
        "lines": 488,
        "characters": 16952,
        "non_empty_lines": 408,
        "avg_line_length": 34.73770491803279
      },
      {
        "path": "invoices/services/enrich.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "decimal": [
            "Decimal"
          ],
          "typing": [
            "Dict",
            "List",
            "Optional"
          ],
          "core.magento": [
            "magento_api_call"
          ]
        },
        "functions": {
          "get_product_tax_data(sku: str)": {
            "docstring": "Get product tax data from Magento by SKU.\nArgs:\nsku (str): The product SKU\nReturns:\nDict: Dictionary with hsn_code, tax_percentage, and intra_or_inter_state",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "sku: str"
            ],
            "line_number": 21
          },
          "enrich_invoice_items(raw_items: List[Dict])": {
            "docstring": "Enrich invoice items with product tax data and calculate tax amounts.\nArgs:\nraw_items (List[Dict]): List of invoice item dictionaries from Magento\nReturns:\nList[Dict]: Enriched invoice items with tax data",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "raw_items: List[Dict]"
            ],
            "line_number": 84
          }
        },
        "classes": {},
        "lines": 183,
        "characters": 6305,
        "non_empty_lines": 148,
        "avg_line_length": 34.45355191256831
      },
      {
        "path": "invoices/services/fetch.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "typing": [
            "Dict",
            "List"
          ],
          "core.magento": [
            "magento_api_call_with_admin"
          ],
          "invoices.exceptions": [
            "FetchError"
          ]
        },
        "functions": {
          "fetch_new_invoices(last_entity_id: int)": {
            "docstring": "Fetch all invoices with entity_id greater than the provided value.\nArgs:\nlast_entity_id (int): Only fetch invoices with entity_id > this value\nReturns:\nList[Dict]: List of invoice dictionaries from Magento\nRaises:\nFetchError: If there's an error fetching from Magento",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "last_entity_id: int"
            ],
            "line_number": 12
          }
        },
        "classes": {},
        "lines": 61,
        "characters": 1967,
        "non_empty_lines": 46,
        "avg_line_length": 32.24590163934426
      },
      {
        "path": "invoices/services/pdf.py",
        "language": "python",
        "imports": {
          "io": [
            "io"
          ],
          "json": [
            "json"
          ],
          "logging": [
            "logging"
          ],
          "datetime": [
            "datetime",
            "timedelta"
          ],
          "decimal": [
            "Decimal"
          ],
          "typing": [
            "Dict",
            "List",
            "Optional",
            "Tuple"
          ],
          "django.conf": [
            "settings"
          ],
          "reportlab.lib": [
            "colors"
          ],
          "reportlab.lib.pagesizes": [
            "A4",
            "landscape"
          ],
          "reportlab.lib.styles": [
            "ParagraphStyle",
            "getSampleStyleSheet"
          ],
          "reportlab.lib.units": [
            "inch",
            "mm"
          ],
          "reportlab.platypus": [
            "Image",
            "Paragraph",
            "SimpleDocTemplate",
            "Spacer",
            "Table",
            "TableStyle"
          ],
          "core.magento": [
            "magento_api_call_with_admin"
          ],
          "integration.azure_storage": [
            "download_blob_to_bytes",
            "generate_blob_sas_url",
            "upload_file_to_blob"
          ],
          "invoices.models": [
            "Invoice",
            "InvoiceItem"
          ]
        },
        "functions": {
          "build_invoice_data(invoice: Invoice)": {
            "docstring": "Build the invoice data dictionary from Invoice and InvoiceItem models.\nArgs:\ninvoice (Invoice): The Invoice model instance\nReturns:\nDict: Invoice data ready for PDF generation",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "invoice: Invoice"
            ],
            "line_number": 42
          },
          "generate_invoice_pdf(invoice_data: Dict, logo_bytes: Optional[bytes], signature_bytes: Optional[bytes])": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "invoice_data: Dict",
              "logo_bytes: Optional[bytes]",
              "signature_bytes: Optional[bytes]"
            ],
            "line_number": 288
          },
          "format_address(address_data)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "address_data"
            ],
            "line_number": 455
          },
          "generate_and_upload_pdf(invoice: Invoice)": {
            "docstring": "Generate a PDF for the invoice and upload it to Azure Blob Storage.\nArgs:\ninvoice (Invoice): The invoice to generate PDF for\nReturns:\nTuple[bool, Optional[str]]: (success, sas_url) - where sas_url is the URL if successful",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "invoice: Invoice"
            ],
            "line_number": 745
          },
          "get_invoice_pdf_url(order_id: int)": {
            "docstring": "Get the PDF URL for an invoice by order ID.\nArgs:\norder_id (int): The order ID to look up\nReturns:\nOptional[str]: SAS URL for the PDF, or None if not found/error",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "order_id: int"
            ],
            "line_number": 812
          },
          "get_invoice_pdf_url_by_order(order_id: int)": {
            "docstring": "Get the PDF URL for an invoice by order ID with better error handling.\nArgs:\norder_id (int): The order ID to look up\nReturns:\nTuple[bool, Optional[str], Optional[str]]: (success, url, error_message)",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "order_id: int"
            ],
            "line_number": 845
          }
        },
        "classes": {},
        "lines": 885,
        "characters": 30888,
        "non_empty_lines": 790,
        "avg_line_length": 34.90169491525424
      },
      {
        "path": "invoices/services/persist.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "typing": [
            "Dict",
            "List",
            "Optional"
          ],
          "django.db": [
            "transaction"
          ],
          "invoices.models": [
            "Invoice",
            "InvoiceItem"
          ]
        },
        "functions": {
          "persist_invoice(header: Dict, items: List[Dict])": {
            "docstring": "Persist invoice header and items to the database in a single transaction.\nArgs:\nheader (Dict): Invoice header data from Magento\nitems (List[Dict]): Enriched invoice items\nReturns:\nOptional[Invoice]: The created or updated Invoice model instance, or None if failed",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "header: Dict",
              "items: List[Dict]"
            ],
            "line_number": 13
          }
        },
        "classes": {},
        "lines": 92,
        "characters": 3796,
        "non_empty_lines": 79,
        "avg_line_length": 41.26086956521739
      },
      {
        "path": "invoices/services/utils.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ],
          "django.db.models.functions": [
            "Coalesce"
          ],
          "invoices.models": [
            "Invoice"
          ]
        },
        "functions": {
          "get_last_processed_entity_id()": {
            "docstring": "Get the highest entity_id from the Invoice table, or 0 if no invoices exist.\nReturns:\nint: The highest entity_id or 0",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [],
            "line_number": 9
          }
        },
        "classes": {},
        "lines": 21,
        "characters": 474,
        "non_empty_lines": 15,
        "avg_line_length": 22.571428571428573
      }
    ],
    "notifications": [
      {
        "path": "notifications/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "notifications/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "notifications/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "NotificationsConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 158,
        "non_empty_lines": 4,
        "avg_line_length": 22.571428571428573
      },
      {
        "path": "notifications/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "notifications/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "notifications/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "notifications/migrations": [
      {
        "path": "notifications/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "orders": [
      {
        "path": "orders/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "orders/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "orders/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "OrdersConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 144,
        "non_empty_lines": 4,
        "avg_line_length": 20.571428571428573
      },
      {
        "path": "orders/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "orders/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "orders/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "orders/migrations": [
      {
        "path": "orders/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "partners": [
      {
        "path": "partners/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "partners/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ],
          ".models": [
            "BusinessPartnerProfile"
          ]
        },
        "functions": {
          "get_queryset(self, request)": {
            "docstring": "Optimize queries by fetching the related UserMapping objects",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request"
            ],
            "line_number": 15
          }
        },
        "classes": {
          "BusinessPartnerProfileAdmin": {
            "docstring": "Admin interface for BusinessPartnerProfile model.",
            "methods": {
              "get_queryset(self, request)": {
                "docstring": "Optimize queries by fetching the related UserMapping objects",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request"
                ],
                "line_number": 16
              }
            },
            "base_classes": [
              "admin.ModelAdmin"
            ],
            "line_number": 7,
            "decorators": [
              {
                "name": "admin.register"
              }
            ],
            "is_component": true
          }
        },
        "lines": 19,
        "characters": 597,
        "non_empty_lines": 13,
        "avg_line_length": 31.42105263157895
      },
      {
        "path": "partners/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "PartnersConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 148,
        "non_empty_lines": 4,
        "avg_line_length": 21.142857142857142
      },
      {
        "path": "partners/location_utils.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "django.core.exceptions": [
            "ValidationError"
          ],
          "shapely.geometry": [
            "Point",
            "MultiPoint"
          ],
          ".models": [
            "BusinessPartnerProfile"
          ]
        },
        "functions": {
          "is_point_in_or_on_polygon_using_shapely(point, polygon_coords)": {
            "docstring": "Shapely implementation to check if a point is inside, on edge, or on a vertex of a polygon.\n\nArgs:\npoint: Tuple of (latitude, longitude)\npolygon_coords: List of tuples representing polygon vertices [(lat1, lon1), (lat2, lon2), ...]\n\nReturns:\nTrue if point is inside, on edge, or on vertex; False if outside",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "point",
              "polygon_coords"
            ],
            "line_number": 9
          },
          "find_bp_by_location(buyer_uid, buyer_latlong)": {
            "docstring": "Find a Business Partner whose coverage area contains the buyer's location.\nArgs:\nbuyer_uid: String representing the unique ID of the buyer (for logging)\nbuyer_latlong: String in format \"lat,lng\" representing buyer's coordinates\nReturns:\nString representing the BP's UID or None if no match is found\nRaises:\nValidationError: If the input coordinates are invalid",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "buyer_uid",
              "buyer_latlong"
            ],
            "line_number": 59
          }
        },
        "classes": {},
        "lines": 138,
        "characters": 5239,
        "non_empty_lines": 111,
        "avg_line_length": 37.96376811594203
      },
      {
        "path": "partners/models.py",
        "language": "python",
        "imports": {
          "django.core.exceptions": [
            "ValidationError"
          ],
          "django.core.validators": [
            "RegexValidator"
          ],
          "django.db": [
            "models"
          ],
          "django.db.models": [
            "Q"
          ],
          "accounts.models": [
            "UserMapping"
          ]
        },
        "functions": {
          "__str__(self)": {
            "docstring": "Validate the BusinessPartnerProfile data:\n1. Ensure coverage_area has between 3-10 coordinates (enough to form at least a triangle)\n2. Ensure the linked UserMapping is a BusinessPartner",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 37
          },
          "clean(self)": {
            "docstring": "Validate the BusinessPartnerProfile data:\n1. Ensure coverage_area has between 3-10 coordinates (enough to form at least a triangle)\n2. Ensure the linked UserMapping is a BusinessPartner",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 40
          },
          "save(self, *args, **kwargs)": {
            "docstring": "Override save to ensure validation is always called",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "*args",
              "**kwargs"
            ],
            "line_number": 69
          }
        },
        "classes": {
          "BusinessPartnerProfile": {
            "docstring": "Extension model for Business Partners that stores additional BP-specific information.\nLinks to UserMapping via one-to-one relationship without modifying the UserMapping structure.",
            "methods": {
              "__str__(self)": {
                "docstring": "Validate the BusinessPartnerProfile data:\n1. Ensure coverage_area has between 3-10 coordinates (enough to form at least a triangle)\n2. Ensure the linked UserMapping is a BusinessPartner",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 38
              },
              "clean(self)": {
                "docstring": "Validate the BusinessPartnerProfile data:\n1. Ensure coverage_area has between 3-10 coordinates (enough to form at least a triangle)\n2. Ensure the linked UserMapping is a BusinessPartner",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 41
              },
              "save(self, *args, **kwargs)": {
                "docstring": "Override save to ensure validation is always called",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "line_number": 70
              }
            },
            "base_classes": [
              "models.Model"
            ],
            "line_number": 9,
            "is_component": true
          }
        },
        "lines": 74,
        "characters": 2627,
        "non_empty_lines": 65,
        "avg_line_length": 35.5,
        "state_changes": [
          {
            "type": "django_create",
            "line": 9,
            "variable": "businesspartnerprofile",
            "mutation_type": "create"
          },
          {
            "type": "django_save",
            "line": 70,
            "variable": "businesspartnerprofile",
            "mutation_type": "update"
          }
        ]
      },
      {
        "path": "partners/serializers.py",
        "language": "python",
        "imports": {
          "rest_framework": [
            "serializers"
          ],
          "accounts.models": [
            "UserMapping"
          ],
          ".models": [
            "BusinessPartnerProfile"
          ]
        },
        "functions": {
          "validate_user_mapping_uid(self, value)": {
            "docstring": "Look up (or create!) the UserMapping with .uid == value.\nIf it doesn’t exist, create it with utypid=2 and role='BP'.\nIf it exists but is not a BP, error out.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 27
          },
          "validate_coverage_area(self, value)": {
            "docstring": "Validate that coverage_area has between 3 and 10 coordinates",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "value"
            ],
            "line_number": 47
          },
          "create(self, validated_data)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "validated_data"
            ],
            "line_number": 63
          },
          "get_assigned_buyers(self, obj)": {
            "docstring": "Returns a list of UIDs of buyers assigned to this BP.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "obj"
            ],
            "line_number": 93
          }
        },
        "classes": {
          "BusinessPartnerProfileSerializer": {
            "docstring": "Serializer for creating BusinessPartnerProfiles\nRequires user_mapping_uid to link with existing UserMapping",
            "methods": {
              "validate_user_mapping_uid(self, value)": {
                "docstring": "Look up (or create!) the UserMapping with .uid == value.\nIf it doesn’t exist, create it with utypid=2 and role='BP'.\nIf it exists but is not a BP, error out.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 28
              },
              "validate_coverage_area(self, value)": {
                "docstring": "Validate that coverage_area has between 3 and 10 coordinates",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "value"
                ],
                "line_number": 48
              },
              "create(self, validated_data)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "validated_data"
                ],
                "line_number": 64
              }
            },
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 8,
            "is_component": true
          },
          "Meta": {
            "docstring": "",
            "methods": {},
            "base_classes": [],
            "line_number": 16
          },
          "BusinessPartnerProfileDetailSerializer": {
            "docstring": "Serializer for retrieving and updating BusinessPartnerProfiles\nIncludes bp_id from the related UserMapping for convenience",
            "methods": {
              "get_assigned_buyers(self, obj)": {
                "docstring": "Returns a list of UIDs of buyers assigned to this BP.",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "obj"
                ],
                "line_number": 94
              }
            },
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 71,
            "is_component": true
          }
        },
        "lines": 105,
        "characters": 3359,
        "non_empty_lines": 88,
        "avg_line_length": 31.99047619047619
      },
      {
        "path": "partners/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "partners/urls.py",
        "language": "python",
        "imports": {
          "django.urls": [
            "path"
          ],
          ".": [
            "views"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 25,
        "characters": 707,
        "non_empty_lines": 22,
        "avg_line_length": 28.28
      },
      {
        "path": "partners/views.py",
        "language": "python",
        "imports": {
          "logging": [
            "logging"
          ],
          "django.core.exceptions": [
            "ValidationError"
          ],
          "django.shortcuts": [
            "render"
          ],
          "drf_spectacular.utils": [
            "OpenApiParameter",
            "OpenApiResponse",
            "extend_schema"
          ],
          "rest_framework": [
            "status"
          ],
          "rest_framework.decorators": [
            "api_view",
            "permission_classes"
          ],
          "rest_framework.permissions": [
            "AllowAny",
            "IsAdminUser",
            "IsAuthenticated"
          ],
          "rest_framework.response": [
            "Response"
          ],
          "accounts.models": [
            "UserMapping"
          ],
          ".location_utils": [
            "find_bp_by_location"
          ],
          ".models": [
            "BusinessPartnerProfile"
          ],
          ".serializers": [
            "BusinessPartnerProfileDetailSerializer",
            "BusinessPartnerProfileSerializer"
          ]
        },
        "functions": {
          "create_bp_profile(request)": {
            "docstring": "Create a new Business Partner profile for an existing Business Partner.\nRequires admin privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 35
              },
              {
                "type": "django_documented_api",
                "line": 35
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 35,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "update_bp_profile(request, uid)": {
            "docstring": "Update an existing Business Partner profile.\nRequires admin privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 74
              },
              {
                "type": "django_documented_api",
                "line": 74
              }
            ],
            "is_async": false,
            "parameters": [
              "request",
              "uid"
            ],
            "line_number": 74,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "list_bp_profiles(request)": {
            "docstring": "List all Business Partner profiles.\nRequires admin privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 141
              },
              {
                "type": "django_documented_api",
                "line": 141
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 141,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "get_bp_profile(request, uid)": {
            "docstring": "Retrieve a specific Business Partner profile.\nRequires admin privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 161
              },
              {
                "type": "django_documented_api",
                "line": 161
              }
            ],
            "is_async": false,
            "parameters": [
              "request",
              "uid"
            ],
            "line_number": 161,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "delete_bp_profile(request, uid)": {
            "docstring": "Delete a Business Partner profile and its associated user mapping.\nDue to CASCADE relationship, deleting the UserMapping will automatically delete the BusinessPartnerProfile.\nRequires admin privileges.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 195
              },
              {
                "type": "django_documented_api",
                "line": 195
              }
            ],
            "is_async": false,
            "parameters": [
              "request",
              "uid"
            ],
            "line_number": 195,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "find_bp_for_location(request)": {
            "docstring": "API endpoint to find a BP for a given location.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 250
              },
              {
                "type": "django_documented_api",
                "line": 250
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 250,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          }
        },
        "classes": {},
        "lines": 277,
        "characters": 10006,
        "non_empty_lines": 249,
        "avg_line_length": 36.12274368231047,
        "state_changes": [
          {
            "type": "django_save",
            "line": 35,
            "variable": "create_bp_profile",
            "mutation_type": "update"
          },
          {
            "type": "django_save",
            "line": 74,
            "variable": "update_bp_profile",
            "mutation_type": "update"
          },
          {
            "type": "django_save",
            "line": 195,
            "variable": "delete_bp_profile",
            "mutation_type": "update"
          }
        ]
      }
    ],
    "partners/management": [
      {
        "path": "partners/management/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "partners/management/commands": [
      {
        "path": "partners/management/commands/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "partners/management/commands/find_bp_for_location.py",
        "language": "python",
        "imports": {
          "django.core.exceptions": [
            "ValidationError"
          ],
          "django.core.management.base": [
            "BaseCommand",
            "CommandError"
          ],
          "partners.location_utils": [
            "find_bp_by_location"
          ]
        },
        "functions": {
          "add_arguments(self, parser)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "parser"
            ],
            "line_number": 9
          },
          "handle(self, *args, **options)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "*args",
              "**options"
            ],
            "line_number": 14
          }
        },
        "classes": {
          "Command": {
            "docstring": "",
            "methods": {
              "add_arguments(self, parser)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "parser"
                ],
                "line_number": 10
              },
              "handle(self, *args, **options)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "*args",
                  "**options"
                ],
                "line_number": 15
              }
            },
            "base_classes": [
              "BaseCommand"
            ],
            "line_number": 7
          }
        },
        "lines": 30,
        "characters": 957,
        "non_empty_lines": 21,
        "avg_line_length": 31.9,
        "state_changes": [
          {
            "type": "useState",
            "line": 14,
            "variable": "handle",
            "mutation_type": "update"
          }
        ],
        "event_handlers": [
          {
            "type": "dom_event",
            "event": "unknown",
            "handler": "handle",
            "line": 14,
            "framework": "Generic"
          }
        ]
      }
    ],
    "partners/migrations": [
      {
        "path": "partners/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "partners/migrations/0001_initial.py",
        "language": "python",
        "imports": {
          "django.core.validators": [
            "django.core.validators"
          ],
          "django.db": [
            "migrations",
            "models"
          ],
          "django.db.models.deletion": [
            "django.db.models.deletion"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 8
          }
        },
        "lines": 61,
        "characters": 1934,
        "non_empty_lines": 54,
        "avg_line_length": 31.704918032786885
      }
    ],
    "rating": [
      {
        "path": "rating/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "rating/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "rating/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "RatingConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 144,
        "non_empty_lines": 4,
        "avg_line_length": 20.571428571428573
      },
      {
        "path": "rating/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "rating/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "rating/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "rating/migrations": [
      {
        "path": "rating/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "returns": [
      {
        "path": "returns/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "returns/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "returns/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "ReturnsConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 146,
        "non_empty_lines": 4,
        "avg_line_length": 20.857142857142858
      },
      {
        "path": "returns/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "returns/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "returns/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "returns/migrations": [
      {
        "path": "returns/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "support": [
      {
        "path": "support/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "support/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "support/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "SupportConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 146,
        "non_empty_lines": 4,
        "avg_line_length": 20.857142857142858
      },
      {
        "path": "support/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "support/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "support/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "support/migrations": [
      {
        "path": "support/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "wallet": [
      {
        "path": "wallet/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "wallet/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      },
      {
        "path": "wallet/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "WalletConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 7,
        "characters": 144,
        "non_empty_lines": 4,
        "avg_line_length": 20.571428571428573
      },
      {
        "path": "wallet/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 57,
        "non_empty_lines": 2,
        "avg_line_length": 14.25
      },
      {
        "path": "wallet/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "wallet/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 63,
        "non_empty_lines": 2,
        "avg_line_length": 15.75
      }
    ],
    "wallet/migrations": [
      {
        "path": "wallet/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      }
    ],
    "walletCreditRequests": [
      {
        "path": "walletCreditRequests/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "walletCreditRequests/admin.py",
        "language": "python",
        "imports": {
          "django.contrib": [
            "admin"
          ],
          ".models": [
            "WalletCreditRequest"
          ],
          "django.utils": [
            "timezone"
          ]
        },
        "functions": {
          "mark_as_completed(self, request, queryset)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self",
              "request",
              "queryset"
            ],
            "line_number": 14
          }
        },
        "classes": {
          "WalletCreditRequestAdmin": {
            "docstring": "",
            "methods": {
              "mark_as_completed(self, request, queryset)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self",
                  "request",
                  "queryset"
                ],
                "line_number": 15
              }
            },
            "base_classes": [
              "admin.ModelAdmin"
            ],
            "line_number": 6,
            "decorators": [
              {
                "name": "admin.register"
              }
            ],
            "is_component": true
          }
        },
        "lines": 23,
        "characters": 919,
        "non_empty_lines": 19,
        "avg_line_length": 39.95652173913044
      },
      {
        "path": "walletCreditRequests/apps.py",
        "language": "python",
        "imports": {
          "django.apps": [
            "AppConfig"
          ]
        },
        "functions": {},
        "classes": {
          "WalletCreditRequestsConfig": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "AppConfig"
            ],
            "line_number": 4
          }
        },
        "lines": 8,
        "characters": 216,
        "non_empty_lines": 5,
        "avg_line_length": 27
      },
      {
        "path": "walletCreditRequests/models.py",
        "language": "python",
        "imports": {
          "django.db": [
            "models"
          ],
          "django.utils": [
            "timezone"
          ]
        },
        "functions": {
          "__str__(self)": {
            "docstring": "",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [],
            "is_async": false,
            "parameters": [
              "self"
            ],
            "line_number": 22
          }
        },
        "classes": {
          "WalletCreditRequest": {
            "docstring": "",
            "methods": {
              "__str__(self)": {
                "docstring": "",
                "state_changes": [],
                "event_handlers": [],
                "api_endpoints": [],
                "is_async": false,
                "parameters": [
                  "self"
                ],
                "line_number": 23
              }
            },
            "base_classes": [
              "models.Model"
            ],
            "line_number": 4,
            "is_component": true
          },
          "Meta": {
            "docstring": "",
            "methods": {},
            "base_classes": [],
            "line_number": 26
          }
        },
        "lines": 30,
        "characters": 906,
        "non_empty_lines": 24,
        "avg_line_length": 30.2,
        "state_changes": [
          {
            "type": "django_create",
            "line": 4,
            "variable": "walletcreditrequest",
            "mutation_type": "create"
          }
        ]
      },
      {
        "path": "walletCreditRequests/serializers.py",
        "language": "python",
        "imports": {
          "rest_framework": [
            "serializers"
          ],
          ".models": [
            "WalletCreditRequest"
          ]
        },
        "functions": {},
        "classes": {
          "WalletCreditRequestSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 5,
            "is_component": true
          },
          "Meta": {
            "docstring": "",
            "methods": {},
            "base_classes": [],
            "line_number": 6
          },
          "WalletCreditRequestUpdateSerializer": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "serializers.ModelSerializer"
            ],
            "line_number": 12,
            "is_component": true
          }
        },
        "lines": 15,
        "characters": 513,
        "non_empty_lines": 11,
        "avg_line_length": 34.2
      },
      {
        "path": "walletCreditRequests/tests.py",
        "language": "python",
        "imports": {
          "django.test": [
            "TestCase"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 4,
        "characters": 60,
        "non_empty_lines": 2,
        "avg_line_length": 15
      },
      {
        "path": "walletCreditRequests/urls.py",
        "language": "python",
        "imports": {
          "django.urls": [
            "path"
          ],
          ".": [
            "views"
          ]
        },
        "functions": {},
        "classes": {},
        "lines": 8,
        "characters": 345,
        "non_empty_lines": 7,
        "avg_line_length": 43.125
      },
      {
        "path": "walletCreditRequests/views.py",
        "language": "python",
        "imports": {
          "django.shortcuts": [
            "render"
          ],
          "logging": [
            "logging"
          ],
          "django.utils": [
            "timezone"
          ],
          "drf_spectacular.utils": [
            "extend_schema",
            "OpenApiParameter",
            "OpenApiResponse"
          ],
          "rest_framework": [
            "status"
          ],
          "rest_framework.decorators": [
            "api_view",
            "permission_classes"
          ],
          "rest_framework.permissions": [
            "AllowAny",
            "IsAuthenticated"
          ],
          "rest_framework.response": [
            "Response"
          ],
          ".models": [
            "WalletCreditRequest"
          ],
          ".serializers": [
            "WalletCreditRequestSerializer",
            "WalletCreditRequestUpdateSerializer"
          ]
        },
        "functions": {
          "add_store_credit(request)": {
            "docstring": "Create a new store credit request from mobile app.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 27
              },
              {
                "type": "django_documented_api",
                "line": 27
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 27,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "list_credit_requests(request)": {
            "docstring": "List all store credit requests for admin view.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 58
              },
              {
                "type": "django_documented_api",
                "line": 58
              }
            ],
            "is_async": false,
            "parameters": [
              "request"
            ],
            "line_number": 58,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          },
          "approve_credit_request(request, request_id)": {
            "docstring": "Approve a store credit request and update its status to COMPLETED.",
            "state_changes": [],
            "event_handlers": [],
            "api_endpoints": [
              {
                "type": "django_api_view",
                "methods": "Multiple",
                "line": 77
              },
              {
                "type": "django_documented_api",
                "line": 77
              }
            ],
            "is_async": false,
            "parameters": [
              "request",
              "request_id"
            ],
            "line_number": 77,
            "decorators": [
              {
                "name": "api_view"
              },
              {
                "name": "permission_classes"
              },
              {
                "name": "extend_schema"
              }
            ]
          }
        },
        "classes": {},
        "lines": 112,
        "characters": 4472,
        "non_empty_lines": 97,
        "avg_line_length": 39.92857142857143
      }
    ],
    "walletCreditRequests/migrations": [
      {
        "path": "walletCreditRequests/migrations/__init__.py",
        "language": "python",
        "imports": {},
        "functions": {},
        "classes": {},
        "lines": 1,
        "characters": 0,
        "non_empty_lines": 0,
        "avg_line_length": 0
      },
      {
        "path": "walletCreditRequests/migrations/0001_initial.py",
        "language": "python",
        "imports": {
          "django.db": [
            "migrations",
            "models"
          ],
          "django.utils.timezone": [
            "django.utils.timezone"
          ]
        },
        "functions": {},
        "classes": {
          "Migration": {
            "docstring": "",
            "methods": {},
            "base_classes": [
              "migrations.Migration"
            ],
            "line_number": 7
          }
        },
        "lines": 46,
        "characters": 1456,
        "non_empty_lines": 39,
        "avg_line_length": 31.652173913043477
      }
    ]
  },
  "summary": {
    "total_files": 174,
    "total_lines": 11799,
    "languages": {
      "unknown": 7,
      "yaml": 1,
      "python": 163,
      "typescript": 2,
      "json": 1
    },
    "extensions": {},
    "frameworks": {
      "Django": 1
    }
  },
  "dependencies": {
    "accounts/admin.py": [
      "django.contrib"
    ],
    "accounts/migrations/0002_alter_usermapping_uid_and_more.py": [
      "django.db"
    ],
    "accounts/apps.py": [
      "django.apps"
    ],
    "accounts/migrations/0006_bphousingsocietymapping.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "accounts/migrations/0001_initial.py": [
      "django.db"
    ],
    "accounts/migrations/0005_usermapping_assigned_bp_usermapping_housing_society.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "accounts/migrations/0004_otpverification.py": [
      "django.db"
    ],
    "accounts/migrations/0003_housingsociety.py": [
      "django.db"
    ],
    "accounts/migrations/0008_alter_usermapping_assigned_bp.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "accounts/migrations/0007_address.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "accounts/migrations/0010_warehouse.py": [
      "django.db"
    ],
    "accounts/migrations/0009_bpwarehousemapping.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "accounts/migrations/0011_fix_bpwarehouse_unique_together.py": [
      "django.db"
    ],
    "accounts/models.py": [
      "django.contrib.auth.models",
      "django.core.exceptions",
      "django.db"
    ],
    "accounts/migrations/0013_usermapping_bp_map_status.py": [
      "django.db"
    ],
    "accounts/permissions.py": [
      "logging",
      "rest_framework"
    ],
    "accounts/serializers.py": [
      "django.core.validators",
      "rest_framework"
    ],
    "accounts/tests/test_models.py": [
      "accounts.models",
      "django.db",
      "django.urls",
      "pytest",
      "rest_framework",
      "rest_framework.test"
    ],
    "accounts/migrations/0012_usermapping_latlong_usermapping_mobile_number.py": [
      "django.db"
    ],
    "accounts/utils.py": [
      "core.magento",
      "datetime",
      "django.conf",
      "django.core.cache",
      "django.db.models",
      "django.utils",
      "hashlib",
      "integration.utils",
      "jwt",
      "logging",
      "math",
      "requests",
      "requests_oauthlib"
    ],
    "accounts/views.py": [
      "core.magento",
      "django.core.exceptions",
      "django.core.validators",
      "django.db",
      "drf_spectacular.types",
      "drf_spectacular.utils",
      "jwt",
      "logging",
      "partners.models",
      "requests",
      "rest_framework",
      "rest_framework.decorators",
      "rest_framework.permissions",
      "rest_framework.response",
      "rest_framework.views"
    ],
    "administration/admin.py": [
      "django.contrib"
    ],
    "administration/apps.py": [
      "django.apps"
    ],
    "administration/management/commands/add_warehouse.py": [
      "accounts.models",
      "django.core.management.base",
      "json"
    ],
    "accounts/urls.py": [
      "django.urls",
      "rest_framework.routers"
    ],
    "administration/models.py": [
      "django.db"
    ],
    "administration/tests.py": [
      "django.test"
    ],
    "administration/views.py": [
      "django.shortcuts"
    ],
    "analytics/admin.py": [
      "django.contrib"
    ],
    "analytics/apps.py": [
      "django.apps"
    ],
    "analytics/tests.py": [
      "django.test"
    ],
    "analytics/models.py": [
      "django.db"
    ],
    "analytics/views.py": [
      "django.shortcuts"
    ],
    "backend/asgi.py": [
      "django.core.asgi",
      "os"
    ],
    "backend/urls.py": [
      "accounts.views",
      "django.contrib",
      "django.urls",
      "drf_spectacular.views"
    ],
    "backend/settings.py": [
      "dotenv",
      "os",
      "pathlib"
    ],
    "backend/wsgi.py": [
      "django.core.wsgi",
      "os"
    ],
    "backend/middleware.py": [
      "accounts.models",
      "django.http",
      "jwt",
      "logging"
    ],
    "catalog/cm_serializers.py": [
      "rest_framework"
    ],
    "catalog/admin.py": [
      "accounts.models",
      "django.contrib"
    ],
    "catalog/apps.py": [
      "django.apps"
    ],
    "catalog/cm_views.py": [
      "accounts.permissions",
      "catalog.cm_serializers",
      "catalog.models",
      "core.magento",
      "datetime",
      "django.core.cache",
      "logging",
      "rest_framework",
      "rest_framework.exceptions",
      "rest_framework.generics",
      "rest_framework.permissions",
      "rest_framework.response",
      "rest_framework.views"
    ],
    "catalog/migrations/0001_initial.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "catalog/serializers.py": [
      "core.magento",
      "html",
      "rest_framework",
      "rest_framework.exceptions"
    ],
    "catalog/tests.py": [
      "django.test"
    ],
    "catalog/models.py": [
      "accounts.models",
      "django.db"
    ],
    "catalog/urls.py": [
      "django.urls"
    ],
    "catalog/urls_cm.py": [
      "catalog.cm_views",
      "catalog.views",
      "django.urls"
    ],
    "catalog/utils.py": [
      "catalog.models",
      "core.magento",
      "datetime",
      "decimal",
      "django.core.cache",
      "hashlib",
      "logging",
      "typing",
      "urllib.parse"
    ],
    "catalog/views.py": [
      "accounts.permissions",
      "accounts.utils",
      "base64",
      "core.magento",
      "drf_spectacular.types",
      "drf_spectacular.utils",
      "integration.utils",
      "logging",
      "rest_framework",
      "rest_framework.parsers",
      "rest_framework.permissions",
      "rest_framework.response",
      "rest_framework.views"
    ],
    "core/admin.py": [
      "django.contrib"
    ],
    "core/apps.py": [
      "django.apps"
    ],
    "core/models.py": [
      "django.db"
    ],
    "core/tests.py": [
      "django.test"
    ],
    "core/views.py": [
      "django.shortcuts"
    ],
    "core/magento.py": [
      "django.conf",
      "inspect",
      "logging",
      "oauthlib.oauth1",
      "requests",
      "requests.adapters",
      "requests.packages.urllib3.util.retry",
      "requests_oauthlib",
      "traceback"
    ],
    "integration/admin.py": [
      "django.contrib"
    ],
    "integration/apps.py": [
      "django.apps"
    ],
    "integration/models.py": [
      "django.db"
    ],
    "integration/azure_storage.py": [
      "azure.storage.blob",
      "datetime",
      "django.conf",
      "logging"
    ],
    "integration/tests.py": [
      "django.test"
    ],
    "integration/views.py": [
      "django.shortcuts"
    ],
    "integration/utils.py": [
      "core.magento",
      "django.conf",
      "django.core.cache",
      "hashlib # Added import for hashlib Issue 2",
      "logging",
      "math # For batching source codes Issue 1"
    ],
    "invoices/admin.py": [
      "django.contrib"
    ],
    "invoices/apps.py": [
      "django.apps"
    ],
    "invoices/migrations/0001_initial.py": [
      "django.db",
      "django.db.models.deletion"
    ],
    "invoices/migrations/0002_invoice_grand_total.py": [
      "django.db"
    ],
    "invoices/migrations/0003_copy_base_grand_total_to_grand_total.py": [
      "django.db"
    ],
    "invoices/models.py": [
      "django.db"
    ],
    "invoices/services/batch_pdf.py": [
      "core.magento",
      "datetime",
      "decimal",
      "django.db",
      "django.db.models",
      "integration.azure_storage",
      "invoices.models",
      "invoices.services.enrich",
      "invoices.services.fetch",
      "invoices.services.pdf",
      "invoices.services.persist",
      "io",
      "logging",
      "typing"
    ],
    "invoices/services/enrich.py": [
      "core.magento",
      "decimal",
      "logging",
      "typing"
    ],
    "invoices/services/pdf.py": [
      "core.magento",
      "datetime",
      "decimal",
      "django.conf",
      "integration.azure_storage",
      "invoices.models",
      "io",
      "json",
      "logging",
      "reportlab.lib",
      "reportlab.lib.pagesizes",
      "reportlab.lib.styles",
      "reportlab.lib.units",
      "reportlab.platypus",
      "typing"
    ],
    "invoices/services/persist.py": [
      "django.db",
      "invoices.models",
      "logging",
      "typing"
    ],
    "invoices/services/fetch.py": [
      "core.magento",
      "invoices.exceptions",
      "logging",
      "typing"
    ],
    "invoices/urls.py": [
      "django.urls",
      "invoices/__init__.py"
    ],
    "invoices/tests.py": [
      "django.test"
    ],
    "manage.py": [
      "django.core.management",
      "os",
      "sys"
    ],
    "invoices/services/utils.py": [
      "django.db",
      "django.db.models.functions",
      "invoices.models"
    ],
    "invoices/views.py": [
      "accounts.models",
      "core.magento",
      "django.db",
      "invoices.exceptions",
      "invoices.services",
      "invoices.services.batch_pdf",
      "logging",
      "partners.models",
      "rest_framework",
      "rest_framework.permissions",
      "rest_framework.response",
      "rest_framework.views",
      "typing"
    ],
    "notifications/admin.py": [
      "django.contrib"
    ],
    "notifications/apps.py": [
      "django.apps"
    ],
    "notifications/models.py": [
      "django.db"
    ],
    "notifications/tests.py": [
      "django.test"
    ],
    "notifications/views.py": [
      "django.shortcuts"
    ],
    "orders/apps.py": [
      "django.apps"
    ],
    "orders/models.py": [
      "django.db"
    ],
    "orders/admin.py": [
      "django.contrib"
    ],
    "orders/tests.py": [
      "django.test"
    ],
    "orders/views.py": [
      "django.shortcuts"
    ],
    "partners/location_utils.py": [
      "django.core.exceptions",
      "logging",
      "shapely.geometry"
    ],
    "partners/apps.py": [
      "django.apps"
    ],
    "partners/admin.py": [
      "django.contrib"
    ],
    "partners/management/commands/find_bp_for_location.py": [
      "django.core.exceptions",
      "django.core.management.base",
      "partners.location_utils"
    ],
    "partners/tests.py": [
      "django.test"
    ],
    "partners/models.py": [
      "accounts.models",
      "django.core.exceptions",
      "django.core.validators",
      "django.db",
      "django.db.models"
    ],
    "partners/migrations/0001_initial.py": [
      "django.core.validators",
      "django.db",
      "django.db.models.deletion"
    ],
    "partners/serializers.py": [
      "accounts.models",
      "rest_framework"
    ],
    "partners/urls.py": [
      "django.urls",
      "partners/__init__.py"
    ],
    "partners/views.py": [
      "accounts.models",
      "django.core.exceptions",
      "django.shortcuts",
      "drf_spectacular.utils",
      "logging",
      "rest_framework",
      "rest_framework.decorators",
      "rest_framework.permissions",
      "rest_framework.response"
    ],
    "rating/apps.py": [
      "django.apps"
    ],
    "rating/tests.py": [
      "django.test"
    ],
    "rating/models.py": [
      "django.db"
    ],
    "rating/admin.py": [
      "django.contrib"
    ],
    "rating/views.py": [
      "django.shortcuts"
    ],
    "returns/admin.py": [
      "django.contrib"
    ],
    "returns/apps.py": [
      "django.apps"
    ],
    "returns/models.py": [
      "django.db"
    ],
    "returns/views.py": [
      "django.shortcuts"
    ],
    "returns/tests.py": [
      "django.test"
    ],
    "support/admin.py": [
      "django.contrib"
    ],
    "support/apps.py": [
      "django.apps"
    ],
    "support/models.py": [
      "django.db"
    ],
    "support/views.py": [
      "django.shortcuts"
    ],
    "wallet/apps.py": [
      "django.apps"
    ],
    "support/tests.py": [
      "django.test"
    ],
    "wallet/admin.py": [
      "django.contrib"
    ],
    "wallet/models.py": [
      "django.db"
    ],
    "walletCreditRequests/admin.py": [
      "django.contrib",
      "django.utils"
    ],
    "wallet/tests.py": [
      "django.test"
    ],
    "wallet/views.py": [
      "django.shortcuts"
    ],
    "walletCreditRequests/apps.py": [
      "django.apps"
    ],
    "walletCreditRequests/models.py": [
      "django.db",
      "django.utils"
    ],
    "walletCreditRequests/migrations/0001_initial.py": [
      "django.db",
      "django.utils.timezone"
    ],
    "walletCreditRequests/tests.py": [
      "django.test"
    ],
    "walletCreditRequests/serializers.py": [
      "rest_framework"
    ],
    "walletCreditRequests/urls.py": [
      "django.urls",
      "walletCreditRequests/__init__.py"
    ],
    "walletCreditRequests/views.py": [
      "django.shortcuts",
      "django.utils",
      "drf_spectacular.utils",
      "logging",
      "rest_framework",
      "rest_framework.decorators",
      "rest_framework.permissions",
      "rest_framework.response"
    ]
  },
  "metadata": {
    "timestamp": "2025-06-23T14:43:14.968Z",
    "duration_ms": 136,
    "engine_version": "0.1.0",
    "repository_path": "/Users/amitk/Development/GitHub/bazoo-backend"
  }
}